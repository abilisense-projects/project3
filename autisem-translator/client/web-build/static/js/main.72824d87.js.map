{"version":3,"file":"static/js/main.72824d87.js","mappings":"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","sources":["services/translationService.js","styles.js","components/shared/button.js","components/shared/textInputField.js","components/shared/form.js","config/validations.js","services/backendServices/userService.js","redux/actions/userAction.js","components/login/login.js","pages/landing.js","components/shared/bannerNotification.js","components/register/registerForm.js","pages/register.js","pages/login.js","services/backendServices/sendTheEmailService.js","components/login/forgotYourPassword.js","pages/forgotPassword.js","components/login/codeFromTheEmail.js","components/login/newPassword.js","redux/reducers/userReducer.js","redux/reducers/patientReducer.js","redux/store.js","services/backendServices/therapistService.js","components/therapist/associatePatient.js","pages/therapist.js","components/recording/recording.js","services/backendServices/patientService.js","redux/actions/patientAction.js","pages/patient.js","components/patient/associateTherapist.js","components/patient/accessOption.js","components/patient/getTherapist.js","components/side_bar/background_selection.js","services/imageService.js","components/shared/uploadImage.js","components/drawer/side.js","components/patient/listOfAssociatedTherapists.js","components/therapist/patientDetailes.js","components/patient/managementByTheParent.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { I18n } from \"i18n-js\";\r\nimport enTranslations from '../translations/en.json';\r\nimport heTranslations from '../translations/he.json';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nconst i18n = new I18n();\r\ni18n.translations = {\r\n    en: enTranslations,\r\n    he: heTranslations,\r\n}\r\n\r\nexport const translationService = {\r\n    getLanguage: () => {\r\n        return i18n.locale;\r\n    },\r\n    storeLanguage: async (language) => {\r\n        try {\r\n            await AsyncStorage.setItem('language', language)\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    getLanguageFromStorage: async () => {\r\n        try {\r\n            const language = await AsyncStorage.getItem('language');\r\n            return language;\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    initializeLanguage: async () => {\r\n        try {\r\n            const storedLanguage = await translationService.getLanguageFromStorage();\r\n            i18n.locale = storedLanguage || 'en';\r\n        } catch (error) {\r\n            console.error('Error setting language:', error);\r\n            i18n.locale = 'en'; // default to English if there's an error\r\n        }\r\n    },\r\n    translate: (word) => {\r\n        try {\r\n            return i18n.t(word);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","// styles.js\r\nimport { StyleSheet } from 'react-native';\r\n\r\nexport const globalStyles = StyleSheet.create({\r\n  whitePaper: {\r\n    backgroundColor: 'white',\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n    marginTop: 40,\r\n    maxWidth: 300,\r\n    alignSelf: 'center', // Center the container horizontally\r\n    alignItems: 'center', // Center the content vertically\r\n    justifyContent: 'center', // Center the content horizontally\r\n  },\r\n  // Add more global styles as needed\r\n});\r\n","import React from \"react\";\r\nimport { Pressable, Text, StyleSheet } from \"react-native\";\r\n\r\nconst GenericButton = ({ onPress, title, isDisabled, buttonWidth }) => {\r\n  return (\r\n    <Pressable\r\n      accessible\r\n      accessibilityLabel={title}\r\n      style={[\r\n        styles.button,\r\n        { opacity: isDisabled ? 0.5 : 1, width: buttonWidth || \"auto\" },\r\n      ]}\r\n      //   disabled={isDisabled}\r\n      onPress={onPress}\r\n    >\r\n      <Text style={styles.buttonText}>{title}</Text>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    backgroundColor: \"green\",\r\n    borderRadius: 8,\r\n    paddingVertical: 10,\r\n    alignItems: \"center\",\r\n    marginTop: 16,\r\n    marginBottom: 12,\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default GenericButton;\r\n","import React, { useState } from 'react';\r\nimport { StyleSheet, TextInput, View, Pressable } from 'react-native';\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\r\n\r\nconst TextInputField = ({ value, onChangeText, placeholder, secure, error }) => {\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const getBorderColor = () => {\r\n    return error ? 'red' :  value && !error ? 'green' : '#ccc';\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container} accessible >\r\n      <TextInput\r\n        style={[styles.input, { borderColor: getBorderColor() }]}\r\n        value={value}\r\n        onChangeText={(text) => {\r\n          onChangeText(text);\r\n        }}\r\n        placeholder={placeholder}\r\n        secureTextEntry={!passwordVisible && secure}\r\n      />\r\n      {secure && (\r\n        <Pressable onPress={togglePasswordVisibility} style={styles.eyeIcon}>\r\n          <MaterialCommunityIcons\r\n            name={passwordVisible ? 'eye-off' : 'eye'}\r\n            size={20}\r\n            color=\"#ccc\"\r\n          />\r\n        </Pressable>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n     marginBottom: 5,\r\n     position: 'relative',\r\n  },\r\n  input: {\r\n    height: 50,\r\n    borderColor: '#ccc',\r\n    borderWidth: 1,\r\n    marginBottom: 5,\r\n    borderRadius: 8,\r\n    fontSize: 16,\r\n  },\r\n  eyeIcon: {\r\n    position: 'absolute',\r\n    right: 12,\r\n    top: 20,\r\n  },\r\n});\r\n\r\nexport default TextInputField;","import React from \"react\";\r\nimport { View, Text, StyleSheet, Picker, Pressable } from \"react-native\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport GenericButton from \"./button\";\r\nimport TextInputField from \"./textInputField\";\r\n\r\nconst GenericForm = ({\r\n  fields,\r\n  onSubmit,\r\n  submitButton,\r\n  disabledButton,\r\n  navigation,\r\n}) => {\r\n  const {\r\n    control,\r\n    trigger,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm({ mode: \"onChange\" });\r\n  const handleInputChange = async (field, text) => {\r\n    setValue(field, text);\r\n    await trigger(field);\r\n  };\r\n  const handlePickerChange = async (field, text) => {\r\n    setValue(field, text);\r\n    await trigger(field);\r\n  };\r\n  const handleLinkPress = (onPress) => {\r\n    if (onPress) {\r\n      onPress(navigation);\r\n    }\r\n  };\r\n  return (\r\n    <View style={styles.container} accessibilityLabel=\"form\" accessible>\r\n      {fields.map((field) => (\r\n        <View key={field.name}>\r\n          {field.type === \"text\" && (\r\n            <Controller\r\n              control={control}\r\n              render={({ field: { value } }) => (\r\n                <TextInputField\r\n                  value={value}\r\n                  onChangeText={(text) => handleInputChange(field.name, text)}\r\n                  placeholder={field.placeholder}\r\n                  secure={field.secureTextEntry}\r\n                  error={errors[field.name]}\r\n                ></TextInputField>\r\n              )}\r\n              name={field.name}\r\n              rules={field.rules}\r\n              defaultValue=\"\"\r\n            />\r\n          )}\r\n          {field.type === \"picker\" && (\r\n            <Controller\r\n              control={control}\r\n              render={({ field: { value } }) => (\r\n                <Picker\r\n                  selectedValue={value}\r\n                  onValueChange={(itemValue) =>\r\n                    handlePickerChange(field.name, itemValue)\r\n                  }\r\n                >\r\n                  {field.options.map((option) => (\r\n                    <Picker.Item\r\n                      key={option.value}\r\n                      label={option.name}\r\n                      value={option.value}\r\n                    />\r\n                  ))}\r\n                </Picker>\r\n              )}\r\n              name={field.name}\r\n              rules={field.rules}\r\n              defaultValue=\"\"\r\n            />\r\n          )}\r\n          {field.type === \"link\" && (\r\n            <Pressable onPress={() => handleLinkPress(field.onPress)}>\r\n              <Text style={styles.link}>{field.text}</Text>\r\n            </Pressable>\r\n          )}\r\n          {errors[field.name] && (\r\n            <Text style={styles.error}>{errors[field.name].message}</Text>\r\n          )}\r\n        </View>\r\n      ))}\r\n      <GenericButton\r\n        onPress={handleSubmit(onSubmit)}\r\n        title={submitButton}\r\n        isDisabled={disabledButton}\r\n      ></GenericButton>\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 10,\r\n    justifyContent: \"center\",\r\n  },\r\n  error: {\r\n    color: \"red\",\r\n    fontSize: 10,\r\n    marginBottom: 5,\r\n  },\r\n  link: {\r\n    color: \"blue\",\r\n    // textDecorationLine: \"underline\",\r\n    textDecorationLine: \"none\",\r\n  },\r\n});\r\nexport default GenericForm;\r\n","import { translationService } from \"../services/translationService\";\r\nconst validations = {\r\n  email: {\r\n    required: translationService.translate(\"email is required\"),\r\n    pattern: {\r\n      value: /\\S+@\\S+\\.\\S+/,\r\n      message: translationService.translate(\"email is invalid\"),\r\n    },\r\n  },\r\n  name: {\r\n    required: translationService.translate(\"name is required\"),\r\n    maxLength: {\r\n      value: 50,\r\n      message: translationService.translate(\r\n        \"name must not exceed 50 characters\"\r\n      ),\r\n    },\r\n  },\r\n  phoneNumber: {\r\n    required: translationService.translate(\"phone number is required\"),\r\n    pattern: {\r\n      value: /^\\d+$/,\r\n      message: translationService.translate(\r\n        \"phone number must contain only numbers\"\r\n      ),\r\n    },\r\n    minLength: {\r\n      value: 10,\r\n      message: translationService.translate(\r\n        \"phone number must be at least 10 digits\"\r\n      ),\r\n    },\r\n    maxLength: {\r\n      value: 15,\r\n      message: translationService.translate(\r\n        \"phone number must not exceed 15 digits\"\r\n      ),\r\n    },\r\n  },\r\n  password: {\r\n    required: translationService.translate(\"password is required\"),\r\n    minLength: {\r\n      value: 8,\r\n      message: translationService.translate(\r\n        \"password must be at least 8 characters\"\r\n      ),\r\n    },\r\n    pattern: {\r\n      value: /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n      message: translationService.translate(\r\n        \"password must include at least one letter, one number, and one symbolic character\"\r\n      ),\r\n    },\r\n  },\r\n\r\n  repeatPassword: {\r\n    required: translationService.translate(\"password is required\"),\r\n    validate: (value, { password }) => {\r\n      if (value !== password) {\r\n        return translationService.translate(\"passwords do not match\");\r\n      }\r\n      return true;\r\n    },\r\n  },\r\n\r\n  code: {\r\n    client: {\r\n      required: \"code is required.\",\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: \"Code must contain only numbers.\",\r\n      },\r\n      minLength: {\r\n        value: 6,\r\n        message: \"Code number must be at least 6 digits.\",\r\n      },\r\n      maxLength: {\r\n        value: 6,\r\n        message: \"Code number must not exceed 6 digits.\",\r\n      },\r\n    },\r\n\r\n    server: {\r\n      validate: (value) => {\r\n        // Assume 'value' is the response from the server\r\n        if (value === \"Code is valid\") {\r\n          // Return true for a valid code\r\n          return true;\r\n        }\r\n        // Return an error message for an invalid code\r\n        return \"Invalid code. Please try again.\";\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default validations;\r\n","import axios from \"axios\";\r\nimport { MMKV } from \"react-native-mmkv\";\r\nimport { REACT_APP_BASE_URL } from \"@env\";\r\n\r\nconst storage = new MMKV();\r\nlet storedToken = storage.getString(\"token\");\r\n\r\nconst UserService = {\r\n  createUser: async (user) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${REACT_APP_BASE_URL}/user/register`,\r\n        user\r\n      );\r\n      const { token, userId } = response.data;\r\n      storage.set(\"token\", token);\r\n      return userId;\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 409) {\r\n        // Handle the username conflict error without logging it\r\n        throw new Error(\"Username conflict\");\r\n      } else {\r\n        // For other errors, log and rethrow\r\n        console.error(\"Registration error:\", error);\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n\r\n  getUserDetails: async () => {\r\n    try {\r\n      //take userName of redux\r\n      const userName = \"piki@example.com\";\r\n      console.log(\"storedToken\", storedToken);\r\n      const response = await axios.get(`${REACT_APP_BASE_URL}/user/profile`, {\r\n        params: {\r\n          userName,\r\n        },\r\n        headers: {\r\n          Authorization: `Bearer ${storedToken}`,\r\n        },\r\n      });\r\n      console.log(\"response:\", response);\r\n      // Check for a new token in the response headers\r\n      const newToken = response.headers[\"x-new-token\"];\r\n      //only if diffrent from old token\r\n      if (newToken && newToken !== storedToken) {\r\n        console.log(\"new token\", newToken);\r\n        storage.set(\"token\", newToken);\r\n        storedToken = storage.getString(\"token\");\r\n        console.log(\"storedTokennnnnnnn\", storedToken);\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.log(\"Get therapist details error:\", error);\r\n      console.log(error.response.status);\r\n      if (error.response && error.response.status === 403) {\r\n        // Token is invalid or expired, navigate to the login screen\r\n        console.log(\"Token invalid or expired. Redirecting to login screen.\");\r\n        // You may use navigation functions or state management to handle redirection\r\n        // to the login screen in your React Native application.\r\n        // navigation.navigate(\"Login\");\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateUsersPassword: (update) =>\r\n    axios\r\n      .put(`${REACT_APP_BASE_URL}/user/updatePassword`, update)\r\n      .then((response) => response.data),\r\n\r\n  loginUser: async (userLogin) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${REACT_APP_BASE_URL}/user/login`,\r\n        userLogin\r\n      );\r\n      return response.data; // Return the entire response if needed\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error(\"Login error:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateImage: async (image) => {\r\n    try {\r\n      const response = await axios.put(\r\n        `${REACT_APP_BASE_URL}/user/updateImage`,\r\n        image\r\n      );\r\n      return response.data; // Return the entire response if needed\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error(\"Login error:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  uploadProfileImage: async (userId, encodedImage) => {\r\n    try {\r\n      const response = await axios.put(\r\n        `${REACT_APP_BASE_URL}/user/uploadProfileImage?userId=${userId}`,\r\n        { image: encodedImage } // send the encoded image in the request body\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.log(\"Upload profile image failed:\", error);\r\n      if (error.response && error.response.status === 413) {\r\n        throw new Error(\"Image Too Large\");\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  },\r\n\r\n};\r\n\r\nexport default UserService;\r\n","export const setUser = (userData) => {\r\n  return {\r\n    type: 'SET_USER',\r\n    payload: {\r\n      userData,\r\n    },\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport GenericForm from \"../shared/form\";\r\nimport validations from \"../../config/validations\";\r\nimport { translationService } from \"../../services/translationService\";\r\nimport UserService from \"../../services/backendServices/userService\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../../redux/actions/userAction\";\r\n\r\n// Translation function alias for shorter usage\r\nconst translate = translationService.translate;\r\n\r\n// StyleSheet for styling components\r\nconst styles = StyleSheet.create({\r\n  errorText: {\r\n    color: \"red\",\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\n// Form fields configuration\r\nconst fields = [\r\n  {\r\n    name: \"userName\",\r\n    placeholder: translate(\"email\"),\r\n    type: \"text\",\r\n    rules: validations.email,\r\n    accesabilityLabel: \"username input\",\r\n    accesabilityHint: \"enter your username\",\r\n  },\r\n  {\r\n    name: \"password\",\r\n    placeholder: translate(\"password\"),\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.password,\r\n    accesabilityLabel: \"password input\",\r\n    accesabilityHint: \"enter your password\",\r\n  },\r\n  {\r\n    name: \"forgotPassword\",\r\n    type: \"link\",\r\n    onPress: (navigation) => navigation.navigate(\"ForgotYourPassword\"),\r\n    text: translate(\"forgot your password\"),\r\n    accesabilityLabel: \"forgot password link\",\r\n    accesabilityHint: \"press to reset your password\",\r\n  },\r\n];\r\n\r\n// Component function for handling user login\r\nexport default function Login() {\r\n  const dispatch = useDispatch();\r\n  // Navigation hook for navigation functions\r\n  const navigation = useNavigation();\r\n\r\n  // State variables for managing component state\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  // Form submission handler\r\n  const onSubmit = async (data) => {\r\n    console.log(\"Form data:\", data);\r\n    try {\r\n      // Set loading state to true to indicate that the login is in progress\r\n      setIsLoading(true);\r\n\r\n      // Send login request to the server\r\n      const response = await UserService.loginUser(data);\r\n      console.log(response);\r\n      if (response.message === \"User exists\") {\r\n        dispatch(setUser({ ...response.user.user, _id: response.user.user._id }));\r\n        if (response.user.user.type == \"therapist\") {\r\n          navigation.navigate(\"Therapist\");\r\n        } else {\r\n          navigation.navigate(\"Patient\");\r\n        }\r\n        // Clear error message if the user exists\r\n        setErrorMessage(null);\r\n      } else {\r\n        // Set error message if the login credentials are incorrect\r\n        setErrorMessage(\"The email or password is incorrect, try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    } finally {\r\n      // Set loading state to false after the validation is complete\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Render the component\r\n  return (\r\n    <View accessible accessibilityLabel=\"login screen\">\r\n      {/* GenericForm component for entering login credentials */}\r\n      <GenericForm\r\n        accessible={true}\r\n        fields={fields}\r\n        onSubmit={onSubmit}\r\n        // submitButton={translate(\"login\")}\r\n        navigation={navigation}\r\n        submitButton={isLoading ? \"Verifying...\" : \"login\"}\r\n        disabledButton={isLoading}\r\n        accesabilityLabel=\"login button\"\r\n      ></GenericForm>\r\n\r\n      {/* Display error message if there is an error during login */}\r\n      <Text style={styles.errorText} accessible>\r\n        {errorMessage}\r\n      </Text>\r\n\r\n      {/* <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n        <CheckBox value={rememberMe} onValueChange={setRememberMe} />\r\n        <Text style={{ marginLeft: 8 }}>{translate('remember me')}</Text>\r\n      </View> */}\r\n    </View>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet, Pressable, TouchableOpacity, Image, Animated, Easing } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { translationService } from \"../services/translationService\";\r\nimport image100 from \"../assets/images/100.png\";\r\nimport { globalStyles } from '../styles';\r\nimport Login from \"../components/login/login\";\r\n\r\nconst translate = translationService.translate;\r\n\r\nexport default function LandingScreen() {\r\n  const navigation = useNavigation();\r\n  const [showLoading, setShowLoading] = useState(false);\r\n\r\n  const fadeIn = useRef(new Animated.Value(0)).current; // for fade-in animation\r\n  const scaleValue = useRef(new Animated.Value(1)).current; // for scale animation\r\n\r\n  useEffect(() => {\r\n    // Start the scale animation when the component mounts\r\n    startScaleAnimation();\r\n  \r\n    // Set a timer for 30 seconds to automatically hide the loading screen\r\n    // const timer = setTimeout(() => {\r\n    //   setShowLoading(false);\r\n    // }, 10000);\r\n  \r\n    // Cleanup function\r\n    // return () => {\r\n    //   clearTimeout(timer);\r\n    // };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (showLoading) {\r\n      Animated.timing(fadeIn, {\r\n        toValue: 1,\r\n        duration: 500, // adjust duration as needed\r\n        useNativeDriver: true,\r\n      }).start();\r\n    } else {\r\n      Animated.timing(fadeIn, {\r\n        toValue: 0,\r\n        duration: 500, // adjust duration as needed\r\n        useNativeDriver: true,\r\n      }).start();\r\n    }\r\n  }, [showLoading]);\r\n\r\n  const startScaleAnimation = () => {\r\n    Animated.loop(\r\n      Animated.sequence([\r\n        Animated.timing(scaleValue, {\r\n          toValue: 1.09, // decrease toValue for less growth\r\n          duration: 1000, // adjust duration for the animation speed\r\n          easing: Easing.linear,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(scaleValue, {\r\n          toValue: 1,\r\n          duration: 1000, // adjust duration for the animation speed\r\n          easing: Easing.linear,\r\n          useNativeDriver: true,\r\n        }),\r\n      ]),\r\n      { iterations: -1 }\r\n    ).start();\r\n  };\r\n\r\n  const handleRegisterNowPress = () => {\r\n    navigation.navigate(\"Registration\");\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View>\r\n        <Image source={image100} style={styles.image} resizeMode=\"contain\" />\r\n      </View>\r\n\r\n      <TouchableOpacity\r\n        style={styles.startButtonContainer}\r\n        onPress={() => setShowLoading(true)}\r\n        activeOpacity={0.7}\r\n      >\r\n        <Animated.View\r\n          style={[\r\n            styles.startButton,\r\n            { transform: [{ scale: scaleValue }] }, // apply scale transform\r\n          ]}\r\n        >\r\n          <Text style={styles.startButtonText}>start</Text>\r\n        </Animated.View>\r\n      </TouchableOpacity>\r\n\r\n      {showLoading && (\r\n        <Animated.View\r\n          style={[styles.loadingContainer, { opacity: fadeIn }]}\r\n          accessible={true}\r\n        >\r\n          <View style={globalStyles.whitePaper}>\r\n            <Login />\r\n            <View style={{ alignItems: \"center\", marginTop: 20 }}>\r\n              <Text style={{ color: \"black\" }}>\r\n                {translate(\"don't have an account\")}\r\n                <Pressable onPress={handleRegisterNowPress}>\r\n                  <Text\r\n                    style={{\r\n                      color: \"green\",\r\n                      textDecorationLine: \"underline\",\r\n                    }}\r\n                  >\r\n                    {translate(\"register here\")}\r\n                  </Text>\r\n                </Pressable>\r\n              </Text>\r\n            </View>\r\n          </View>\r\n        </Animated.View>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"green\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  startButtonContainer: {\r\n    position: \"absolute\",\r\n    bottom: 20,\r\n  },\r\n  startButton: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: 50, \r\n    padding: 10,\r\n    width: 50, \r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  startButtonText: {\r\n    color: \"green\",\r\n    textAlign: \"center\",\r\n  },\r\n  image: {\r\n    width: 250,\r\n    height: 150,\r\n  },\r\n  loadingContainer: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: \"white\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n","import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, Dimensions } from 'react-native';\r\nimport Modal from 'react-native-modal';\r\n\r\nconst BannerNotification = ({ message, severity, onClose }) => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsModalVisible(true);\r\n\r\n    const timer = setTimeout(() => {\r\n      setIsModalVisible(false);\r\n\r\n      if (onClose) {\r\n        onClose();\r\n      }\r\n    }, 3000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [onClose]);\r\n\r\n  const { width: screenWidth } = Dimensions.get('window');\r\n  const halfScreenWidth = screenWidth / 2;\r\n\r\n  return (\r\n    <Modal\r\n      accessible\r\n      accessibilityLabel='banner notification'\r\n      isVisible={isModalVisible}\r\n      animationIn=\"slideInUp\"\r\n      animationOut=\"slideOutDown\"\r\n      backdropOpacity={0.5}\r\n    >\r\n      <View style={[styles.container, { width: halfScreenWidth }]} accessible>\r\n        <Text style={[styles.message, { color: 'white', backgroundColor: severity === 'error' ? 'red' : 'green' }]}>\r\n          {message}\r\n        </Text>\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: 0,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  message: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default BannerNotification;\r\n","import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport GenericForm from \"../shared/form\";\r\nimport validations from \"../../config/validations\";\r\nimport UserService from \"../../services/backendServices/userService\";\r\nimport { translationService } from \"../../services/translationService\";\r\nimport BannerNotification from \"../shared/bannerNotification\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../../redux/actions/userAction\";\r\nimport { globalStyles } from '../../styles';\r\n\r\nconst translate = translationService.translate;\r\n\r\nconst userTypeOptions = [\r\n  { name: translate(\"select user type\"), value: \"\" },\r\n  { name: translate(\"therapist\"), value: \"therapist\" },\r\n  { name: translate(\"patient\"), value: \"patient\" },\r\n];\r\n\r\nconst fields = [\r\n  {\r\n    name: \"userName\",\r\n    placeholder: translate(\"email\"),\r\n    type: \"text\",\r\n    rules: validations.email,\r\n    accesabilityLabel: \"username input\",\r\n    accesabilityHint: \"enter your username\",\r\n  },\r\n  {\r\n    name: \"firstName\",\r\n    placeholder: translate(\"first name\"),\r\n    type: \"text\",\r\n    rules: validations.name,\r\n    accesabilityLabel: \"first name input\",\r\n    accesabilityHint: \"enter your first name\",\r\n  },\r\n  {\r\n    name: \"lastName\",\r\n    placeholder: translate(\"last name\"),\r\n    type: \"text\",\r\n    rules: validations.name,\r\n    accesabilityLabel: \"last name input\",\r\n    accesabilityHint: \"enter your last name\",\r\n  },\r\n  {\r\n    name: \"phoneNumber\",\r\n    placeholder: translate(\"phone number\"),\r\n    type: \"text\",\r\n    rules: validations.phoneNumber,\r\n    accesabilityLabel: \"phone number input\",\r\n    accesabilityHint: \"enter your phone number\",\r\n  },\r\n  {\r\n    name: \"password\",\r\n    placeholder: translate(\"password\"),\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.password,\r\n    accesabilityLabel: \"password input\",\r\n    accesabilityHint: \"enter your password\",\r\n  },\r\n  {\r\n    name: \"repeatPassword\",\r\n    placeholder: translate(\"verify password\"),\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.repeatPassword,\r\n    accesabilityLabel: \"password verification input\",\r\n    accesabilityHint: \"verify your password\",\r\n  },\r\n  {\r\n    name: \"type\",\r\n    options: userTypeOptions,\r\n    type: \"picker\",\r\n    rules: { required: translate(\"type is required\") },\r\n    accesabilityLabel: \"user type input\",\r\n    accesabilityHint: \"select your user type\",\r\n  },\r\n];\r\n//save userName in redux\r\n\r\nexport default function RegistrationForm() {\r\n  const navigation = useNavigation();\r\n  const [notification, setNotification] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const _id = await UserService.createUser(data);\r\n      const dataWithUserId = { ...data, _id };\r\n      dispatch(setUser(dataWithUserId));\r\n      //setNotification({ message: translate('created successfully'), severity: 'success' });\r\n      if (data.type == \"therapist\") {\r\n        navigation.navigate(\"Therapist\");\r\n      } else {\r\n        navigation.navigate(\"Patient\")\r\n      }\r\n    } catch (error) {\r\n      if (error.message === \"Username conflict\") {\r\n        setErrorMessage(translate(\"username exists\"));\r\n      } else {\r\n        setNotification({\r\n          message: translate(\"error creating user\"),\r\n          severity: \"error\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={globalStyles.whitePaper} accessible accessibilityLabel=\"registration screen\">\r\n      {/* check if fields & userTypeOptions are not null */}\r\n      <GenericForm\r\n        fields={fields}\r\n        onSubmit={onSubmit}\r\n        submitButton={translate(\"registration\")}\r\n        \r\n      ></GenericForm>\r\n      {notification && (\r\n        <View accessible>\r\n          <BannerNotification\r\n            message={notification.message}\r\n            severity={notification.severity}\r\n            onClose={() => setNotification(null)}\r\n          />\r\n        </View>\r\n      )}\r\n      {errorMessage && (\r\n        <View accessible>\r\n          <Text style={styles.errorText}>{errorMessage}</Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  errorText: {\r\n    color: \"red\",\r\n    marginTop: 10,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport RegistrationForm from \"../components/register/registerForm\";\r\n\r\nexport default function RegistrationScreen() {\r\n  return (\r\n    <View accessible={true}>\r\n      <RegistrationForm></RegistrationForm>\r\n    </View>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { View, Text, Pressable } from \"react-native\";\r\nimport Login from \"../components/login/login\";\r\nimport { translationService } from \"../services/translationService\";\r\nimport { globalStyles } from '../styles';\r\nconst translate = translationService.translate;\r\n\r\nexport default function LoginScreen({ navigation }) {\r\n  const handleRegisterNowPress = () => {\r\n    navigation.navigate(\"Registration\");\r\n  };\r\n\r\n  return (\r\n    <View style={globalStyles.whitePaper}>\r\n      <Login />\r\n      <View style={{ alignItems: \"center\", marginTop: 20 }}>\r\n        <Text style={{ color: \"black\" }}>\r\n          {translate(\"don't have an account\")}\r\n          <Pressable onPress={handleRegisterNowPress}>\r\n            <Text style={{ color: \"green\", textDecorationLine: \"underline\" }}>\r\n              {translate(\"register here\")}\r\n            </Text>\r\n          </Pressable>\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { REACT_APP_BASE_URL } from \"@env\";\r\n\r\nconst sendTheEmailService = {\r\n  createSendTheEmail: (sendTheEmail) =>\r\n    axios\r\n      .post(`${REACT_APP_BASE_URL}/sendEmail/`, sendTheEmail)\r\n      .then((response) => response.data),\r\n  createCodeFromEmail: (codeFromEmail) =>\r\n    axios\r\n      .post(`${REACT_APP_BASE_URL}/sendEmail/verify-code`, codeFromEmail)\r\n      .then((response) => response.data),\r\n};\r\nexport default sendTheEmailService;\r\n","import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport GenericForm from \"../shared/form\";\r\nimport validations from \"../../config/validations\";\r\nimport SendTheEmailService from \"../../services/backendServices/sendTheEmailService\";\r\nimport { translationService } from \"../../services/translationService\";\r\nimport { globalStyles } from \"../../styles\";\r\n\r\n// Translation function alias for shorter usage\r\nconst translate = translationService.translate;\r\n\r\n// StyleSheet for styling components\r\nconst styles = StyleSheet.create({\r\n  errorText: {\r\n    color: \"red\",\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\n// Form fields configuration\r\nconst fields = [\r\n  {\r\n    // name: \"UserName\"\r\n    name: \"userName\",\r\n    placeholder: translate(\"enter your email\"),\r\n    type: \"text\",\r\n    rules: validations.email,\r\n    accesabilityLabel: \"email input\",\r\n    accesabilityHint: \"enter your email\",\r\n  },\r\n];\r\n\r\n// Component function for handling password reset request\r\nexport default function ForgotYourPassword() {\r\n  // Navigation hook for navigation functions\r\n  const navigation = useNavigation();\r\n\r\n  // State variables for managing component state\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  // Form submission handler\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // Set loading state to true to indicate that the password reset request is in progress\r\n      setIsLoading(true);\r\n\r\n      console.log(data.userName);\r\n      // Call the backend service to send the password reset email\r\n      const response = await SendTheEmailService.createSendTheEmail({\r\n        userName: data.userName,\r\n      });\r\n\r\n      // Check the response from the server\r\n      console.log(response);\r\n      if (response.message === \"User exists\") {\r\n        // Clear error message if the user exists\r\n        setErrorMessage(null);\r\n        // Navigate to the \"CodeFromTheEmail\" screen, passing the userName as a parameter\r\n        navigation.navigate(\"CodeFromTheEmail\", { userName: data.userName }); //send userName\r\n        console.log(\"Email sent successfully!\");\r\n      } else {\r\n        // Set error message if the user does not exist\r\n        setErrorMessage(\"User does not exist.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error sending email:\",\r\n        error.response?.data || error.toString()\r\n      );\r\n    } finally {\r\n      // Set loading state to false after the validation is complete\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Render the component\r\n  return (\r\n    <View\r\n      style={globalStyles.whitePaper}\r\n      accessible\r\n      accessibilityLabel=\"forgot your password screen\"\r\n    >\r\n      {/* GenericForm component for entering email address for password reset */}\r\n      <GenericForm\r\n        fields={fields}\r\n        onSubmit={onSubmit}\r\n        submitButton={\r\n          isLoading ? translate(\"sending\") : translate(\"reset password\")\r\n        }\r\n        disabledButton={isLoading}\r\n      ></GenericForm>\r\n      {/* Display error message if there is an error during the password reset request */}\r\n      <Text\r\n        style={styles.errorText}\r\n        accessible\r\n        accessibilityLabel=\"Sending email\"\r\n      >\r\n        {errorMessage}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport ForgotYourPassword from \"../components/login/forgotYourPassword\";\r\n\r\nexport default function ForgotPassword() {\r\n  return (\r\n    <View accessible={true}> \r\n      <ForgotYourPassword></ForgotYourPassword>\r\n    </View>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { View, StyleSheet, Text, Pressable } from \"react-native\";\r\nimport GenericForm from \"../shared/form\";\r\nimport validations from \"../../config/validations\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport sendTheEmailService from \"../../services/backendServices/sendTheEmailService\";\r\nimport { translationService } from \"../../services/translationService\";\r\nimport { globalStyles } from \"../../styles\";\r\n\r\n\r\n// Translation function alias for shorter usage\r\nconst translate = translationService.translate;\r\n\r\n// StyleSheet for styling components\r\nconst styles = StyleSheet.create({\r\n  errorText: {\r\n    color: \"red\",\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\n// Form fields configuration\r\nconst fields = [\r\n  {\r\n    name: \"Code\",\r\n    state: \"code\",\r\n    placeholder: translate(\"enter your code\"),\r\n    type: \"text\",\r\n    rules: validations.code.client,\r\n    accesabilityLabel: \"verification code input\",\r\n    accesabilityHint: \"enter the code you received in your email\",\r\n  },\r\n];\r\n\r\n// Component function to handle verification code from email\r\nexport default function CodeFromTheEmail(userName) {\r\n  // Navigation hook for navigation functions\r\n  const navigation = useNavigation();\r\n\r\n  // State variables for managing component state\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // State variables for handling button disablement and timer\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [disableUntil, setDisableUntil] = useState(0);\r\n  const [remainingTime, setRemainingTime] = useState(0);\r\n\r\n  // Form submission handler\r\n  const onSubmit = (data) => {\r\n    HandleVerification(data);\r\n  };\r\n\r\n  // Effect hook for managing button disablement and timer updates\r\n  useEffect(() => {\r\n    if (disableUntil > 0) {\r\n      setIsButtonDisabled(true);\r\n\r\n      // Calculate the remaining time until the button is enabled\r\n      const remainingTime = disableUntil - new Date().getTime();\r\n      setRemainingTime(remainingTime);\r\n\r\n      // Set a timeout to update the remaining time\r\n      const timeoutId = setInterval(() => {\r\n        setRemainingTime((prevTime) => prevTime - 1000);\r\n      }, 1000);\r\n\r\n      // Set a timeout to enable the button when the timer expires\r\n      const enableTimeoutId = setTimeout(() => {\r\n        setIsButtonDisabled(false);\r\n        setDisableUntil(0);\r\n        clearInterval(timeoutId); // Clear the countdown interval\r\n      }, remainingTime);\r\n\r\n      // Clear the timeout when the component is unmounted\r\n      return () => {\r\n        clearTimeout(timeoutId);\r\n        clearTimeout(enableTimeoutId);\r\n      };\r\n    }\r\n  }, [disableUntil]);\r\n\r\n  // Verification code handling function\r\n  const HandleVerification = async (data) => {\r\n    try {\r\n      console.log(data.Code);\r\n      // Set loading state to true to indicate that the code is being verified\r\n      setIsLoading(true);\r\n\r\n      // Send the verification code to the server for validation\r\n      const response = await sendTheEmailService.createCodeFromEmail({\r\n        code: data.Code,\r\n      });\r\n      console.log(response);\r\n\r\n      // Validate the server response\r\n      const validationResult = validations.code.server.validate(response);\r\n      console.log(validationResult);\r\n\r\n      if (validationResult !== true) {\r\n        // Set the error state with the validation message\r\n        setError(validationResult);\r\n\r\n        if (response.disableUntil) {\r\n          // Update the state to disable the button and set the disableUntil time\r\n          setDisableUntil(response.disableUntil);\r\n        }\r\n      } else {\r\n        // Reset the error state if the validation passes\r\n        setError(null);\r\n        // Code is valid, navigate to the next screen\r\n        navigation.navigate(\"NewPassword\", { userName });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error verifying code:\", error);\r\n    } finally {\r\n      // Set loading state to false after the validation is complete\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Navigation function for handling \"Forgot Password\" press\r\n  const handleForgotPasswordPress = () => {\r\n    // navigation.navigate(\"ForgotYourPassword\");\r\n    navigation.reset({\r\n      index: 0,\r\n      routes: [{ name: \"ForgotYourPassword\" }]\r\n    });\r\n  };\r\n\r\n  // Render the component\r\n  return (\r\n    <View  style={globalStyles.whitePaper} accessible accesabilityLabel='verification code screen'>\r\n      {console.log(\"isButtonDisabled:\", isButtonDisabled)}\r\n\r\n      {/* GenericForm component for entering verification code */}\r\n      <GenericForm\r\n      accessible={true}\r\n\r\n        fields={fields}\r\n        onSubmit={onSubmit}\r\n        submitButton={\r\n          disableUntil\r\n            ? translate(\"try later\")\r\n            : isLoading\r\n            ? translate(\"verifying\")\r\n            : translate(\"next\")\r\n        }\r\n        disabledButton={isLoading || isButtonDisabled}\r\n      ></GenericForm>\r\n\r\n      {/* Link to navigate to the \"Forgot Password\" screen */}\r\n      <Pressable onPress={handleForgotPasswordPress}>\r\n        <Text style={{ color: \"blue\" }}>No email sent?</Text>\r\n      </Pressable>\r\n\r\n      {/* Display error message if there is an error */}\r\n      {error && <Text style={styles.errorText}>{error}</Text>}\r\n\r\n      {/* Display remaining time if the button is disabled */}\r\n      {disableUntil > 0 && (\r\n        <Text style={{ marginTop: 10 }}>\r\n          Time remaining: {Math.floor(remainingTime / 60000)} minutes and{\" \"}\r\n          {Math.ceil((remainingTime % 60000) / 1000)} seconds\r\n        </Text>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\nimport GenericForm from \"../shared/form\";\r\nimport validations from \"../../config/validations\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport UserService from \"../../services/backendServices/userService\";\r\nimport { translationService } from \"../../services/translationService\";\r\n\r\n// Translation function alias for shorter usage\r\nconst translate = translationService.translate;\r\n\r\n// StyleSheet for styling components\r\nconst styles = StyleSheet.create({\r\n  errorText: {\r\n    // color: \"red\",\r\n    marginTop: 10,\r\n  },\r\n  modalContent: {\r\n    backgroundColor: \"white\",\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n    marginTop: 40, // Adjust this value as needed\r\n  },\r\n});\r\n\r\n// Form fields configuration for new password entry\r\nconst fields = [\r\n  {\r\n    name: \"password\",\r\n    placeholder: translate(\"new password\"),\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.password,\r\n    accesabilityLabel: \"password input\",\r\n    accesabilityHint: \"enter your password\",\r\n  },\r\n  {\r\n    name: \"repeatPassword\",\r\n    placeholder: translate(\"verify password\"),\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.repeatPassword,\r\n    accesabilityLabel: \"password verification input\",\r\n    accesabilityHint: \"verify your password\",\r\n  },\r\n];\r\n\r\n// Component function for handling password update\r\nexport default function NewPassword({ route }) {\r\n  // Navigation hook for navigation functions\r\n  const navigation = useNavigation();\r\n\r\n  // State variable for displaying success message\r\n  const [message, setMessage] = useState(null);\r\n\r\n  // Form submission handler for updating the password\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // Extract the userName from the route parameters\r\n      const { userName } = route.params;\r\n      console.log(userName);\r\n\r\n      // Call the backend service to update the user's password\r\n      const response = await UserService.updateUsersPassword({\r\n        userName: userName.route.params.userName,\r\n        newPassword: data.repeatPassword,\r\n      });\r\n      // Log relevant information for debugging\r\n      console.log(userName.route.params.userName);\r\n      console.log(\"Form Data:\", data, route);\r\n      console.log(response);\r\n      console.log(\"response.Message\", response.message);\r\n\r\n      // Check the response from the server\r\n      if (response.message === \"Success update\") {\r\n        // Set a success message to be displayed\r\n        navigation.navigate(\"Login\");\r\n      } else {\r\n        setMessage(\"Update password failed\");\r\n      }\r\n    } catch (error) {\r\n      // Log and handle errors, e.g., display an error message to the user\r\n      console.error(\"Error updating password:\", error);\r\n    }\r\n  };\r\n\r\n  // Render the component\r\n  return (\r\n    <View style={styles.modalContent} accessible accesabilityLabel='new password screen'>\r\n      {/* GenericForm component for entering and verifying the new password */}\r\n      <GenericForm\r\n        accessible={true}\r\n        accesabilityLabel=\"new password screen\"\r\n        fields={fields}\r\n        onSubmit={onSubmit}\r\n        submitButton={translate(\"save\")}\r\n      ></GenericForm>\r\n\r\n      {/* Display success message if the password is updated successfully */}\r\n      <Text style={styles.errorText} accessible accessibilityLabel=\"reset password\">{message}</Text>\r\n    </View>\r\n  );\r\n}\r\n","const initialState = {\r\n    user: null,\r\n  };\r\n  \r\n  const userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case 'SET_USER':\r\n        return {\r\n          ...state,\r\n          user: action.payload,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default userReducer;","const initialState = {\r\n    num: \"0\",\r\n  };\r\n  \r\n  const patientReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case 'SET_UNREAD_NOTIFICATION':\r\n        return {\r\n          ...state,\r\n          num: action.payload,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default patientReducer;","import { createStore, combineReducers } from \"redux\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport patientReducer from \"./reducers/patientReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  patient: patientReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import axios from \"axios\";\r\nimport { REACT_APP_BASE_URL } from \"@env\";\r\nconst therapistService = {\r\n  getTherapistPatients: async (therapistId) => {\r\n    try {\r\n      const response = await axios.get(`${REACT_APP_BASE_URL}/therapist/${therapistId}/patients`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching therapist patients:', error);\r\n      throw new Error('Error fetching therapist patients');\r\n    }\r\n  },\r\n\r\n  sendNotificationToPatient: async (therapistId, patientUserName) => {\r\n    try {\r\n      const response = await axios.post(`${REACT_APP_BASE_URL}/therapist/sendNotification`, {\r\n        therapistId: therapistId,\r\n        patientUserName: patientUserName\r\n      });\r\n      if (response.data.message == 'Patient not found') {\r\n        return 'no such patient'\r\n      }\r\n      return null\r\n    } catch (error) {\r\n      console.error('Error sending notification:', error);\r\n      throw new Error('Error sending notification');\r\n    }\r\n  },\r\n\r\n  unAssociatePatient: async (therapistId, patientId) => {\r\n    try {\r\n      console.log(\"cliiii\", therapistId, patientId)\r\n      const response = await axios.delete(`${REACT_APP_BASE_URL}/therapist?therapistID=${therapistId}&patientID=${patientId}`);\r\n      console.log(\"response\", response)\r\n      if (response.data.success != true) {\r\n        return 'failed'\r\n      }\r\n      else {\r\n        return true\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending notification:', error);\r\n      throw new Error('Error sending notification');\r\n    }\r\n  },\r\n\r\n  getPatientsDetailes: async (patientId) => {\r\n    try {\r\n      const response = await axios.get(`${REACT_APP_BASE_URL}/therapist/patients-details/${patientId}`);\r\n      console.log(\"response\", response);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error sending notification:', error);\r\n      throw new Error('Error sending notification');\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default therapistService;\r\n","import React, { useState } from 'react';\r\nimport { View, Modal, StyleSheet,Text } from 'react-native';\r\nimport TextInputField from '../shared/textInputField';\r\nimport GenericButton from '../shared/button';\r\nimport { globalStyles } from '../../styles';\r\n\r\nconst AssociatePatient = ({ isVisible, onConfirm, onCancel, errorMessage }) => {\r\n    const [newPatientUsername, setNewPatientUsername] = useState('');\r\n\r\n    const handleModalConfirm = () => {\r\n        if (newPatientUsername.trim() !== '') {\r\n            onConfirm(newPatientUsername);\r\n            setNewPatientUsername('');\r\n        } else {\r\n            console.log('Invalid Username', 'Please enter a valid username.');\r\n        }\r\n    };\r\n\r\n    const handleModalCancel = () => {\r\n        setNewPatientUsername('');\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Modal visible={isVisible} transparent>\r\n            <View style={styles.modalContainer}>\r\n                <View style={globalStyles.whitePaper}>\r\n                    <TextInputField\r\n                        placeholder=\"Enter patient username\"\r\n                        value={newPatientUsername}\r\n                        onChangeText={(text) => setNewPatientUsername(text)}\r\n                    />\r\n                    {errorMessage && (\r\n                        <Text style={styles.errorMessage}>{errorMessage}</Text>\r\n                    )}\r\n                    <GenericButton onPress={handleModalConfirm} title='Confirm' buttonWidth={160} />\r\n                    <GenericButton onPress={handleModalCancel} title='Cancel' buttonWidth={160} />\r\n                </View>\r\n            </View>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    modalContainer: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#01461cd6',\r\n    },\r\n    errorMessage: {\r\n        color: 'red',\r\n        marginTop: 5,\r\n    },\r\n});\r\n\r\nexport default AssociatePatient;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, StyleSheet, Image, Pressable } from 'react-native';\r\nimport therapistService from '../services/backendServices/therapistService';\r\nimport GenericButton from '../components/shared/button';\r\nimport { useSelector } from 'react-redux';\r\nimport NoPatientsImage from '../assets/images/therapist room.jpg'\r\nimport AssociatePatient from '../components/therapist/associatePatient';\r\nimport BannerNotification from '../components/shared/bannerNotification';\r\nimport { globalStyles } from '../styles';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst TherapistScreen = () => {\r\n  const [patients, setPatients] = useState([]);\r\n  const [filteredPatients, setFilteredPatients] = useState([]);\r\n  const [isAssociatePatientModalVisible, setAssociatePatientModalVisible] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [bannerMessage, setBannerMessage] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const therapistId = useSelector((state) => state.user.user.userData._id);\r\n  const navigation = useNavigation();\r\n  const [isDisplayingPending, setIsDisplayingPending] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [therapistId]);\r\n\r\n  //gets patients list by therapist id\r\n  const fetchData = async () => {\r\n    try {\r\n      const patientsData = await therapistService.getTherapistPatients(therapistId);\r\n      if (!patientsData || patientsData.length <= 0) {\r\n        setPatients([]);\r\n        setFilteredPatients([]);\r\n      // } else if (patientsData.length === 1 && patientsData[0].status === 'Confirmed') {\r\n      //   // Automatically navigate to patient details if there's only one patient and status is Confirmed\r\n      //   navigation.navigate('PatientDetails', { patientId: patientsData[0].patientDetails._id });\r\n      } else {\r\n        setPatients(patientsData);\r\n        // Display confirmed patients initially\r\n        const confirmedPatients = patientsData.filter(patient => patient.status === 'Confirmed');\r\n        setFilteredPatients(confirmedPatients);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n    finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleDisplayPending = () => {\r\n    setIsDisplayingPending(!isDisplayingPending);\r\n\r\n    // Update filtered patients based on the new display mode\r\n    const patientsToDisplay = isDisplayingPending\r\n      ? patients.filter(patient => patient.status === 'Confirmed')\r\n      : patients.filter(patient => patient.status === 'Pending');\r\n\r\n    setFilteredPatients(patientsToDisplay);\r\n  };\r\n\r\n  //set opem modal true for entering patient's name\r\n  const handleAddPatient = () => {\r\n    setAssociatePatientModalVisible(true);\r\n  };\r\n\r\n  const handleAssociatePatientConfirm = async (patientUsername) => {\r\n    try {\r\n      //first check if it exist in patients\r\n      const isUserNameExists = patients.some(patient => (\r\n        `${patient.patientDetails.userName}` === patientUsername\r\n      ));\r\n\r\n      if (isUserNameExists) {\r\n        setMessage(`This patient already exists on your list.`);\r\n        return;\r\n      }\r\n      // send notification to patient\r\n      const notificationStatus = await therapistService.sendNotificationToPatient(therapistId, patientUsername);\r\n      if (notificationStatus === 'no such patient') {\r\n        setBannerMessage('Failed to send notification. There is no such Patient.');\r\n      } else {\r\n        setBannerMessage(`Notification sent to ${patientUsername}`);\r\n      }\r\n    } catch (error) {\r\n      setBannerMessage(\"Failed to send notification. Please try again.\");\r\n    }\r\n    // close modal\r\n    setAssociatePatientModalVisible(false);\r\n  };\r\n\r\n  const handleAssociatePatientCancel = () => {\r\n    setAssociatePatientModalVisible(false);\r\n  };\r\n\r\n  const handleRemoveSinglePatient = async (patient) => {\r\n    try {\r\n      const deletion = await therapistService.unAssociatePatient(therapistId, patient.patientDetails._id)\r\n      if (deletion) {\r\n        console.log(\"deletion\", deletion)\r\n        // const updatedPatients = patients.filter((p) => p.patientDetails._id !== patient.patientDetails._id);\r\n        // setPatients(updatedPatients);\r\n        setBannerMessage(`Patient ${patient.patientDetails.firstName} ${patient.patientDetails.lastName} deleted successfully.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting patient:', error);\r\n      setBannerMessage('Failed to delete patient. Please try again.');\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'Confirmed':\r\n        return 'white';\r\n      case 'Pending':\r\n        return 'rgba(255, 255, 0, 0.2)';\r\n      default:\r\n        return 'rgba(255, 0, 0, 0.2)';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={globalStyles.whitePaper}>\r\n      {isLoading ? (\r\n        <Text>Loading...</Text>\r\n      ) : (\r\n        <>\r\n          {patients.length > 0 && (\r\n            <Text style={styles.header}>My Patients</Text>\r\n          )}\r\n          {patients.length === 0 ? (\r\n            <View style={styles.noPatientsContainer}>\r\n              <Text style={styles.noPatientsText}>No patients yet</Text>\r\n              <Image source={NoPatientsImage} style={styles.noPatientsImage} />\r\n            </View>\r\n          ) : (\r\n            <FlatList\r\n              data={filteredPatients}\r\n              keyExtractor={(item) => item.patientDetails._id}\r\n              renderItem={({ item }) => (\r\n             <View style={[styles.patientContainer, { backgroundColor: getStatusColor(item.status) }]}>\r\n                    <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                      {item.status === 'Confirmed' ? (\r\n                        <Pressable onPress={() => navigation.navigate('PatientDetails', { patientId: item.patientDetails._id })}>\r\n                          <Text style={styles.patientName}>{`${item.patientDetails.firstName} ${item.patientDetails.lastName}`}</Text>\r\n                        </Pressable>\r\n                      ) : (\r\n                        <Text style={styles.patientName}>{`${item.patientDetails.firstName} ${item.patientDetails.lastName}`}</Text>\r\n                      )}\r\n                      <Pressable onPress={() => handleRemoveSinglePatient(item)}>\r\n                        <Ionicons name='trash' style={styles.icon} />\r\n                      </Pressable>\r\n                    </View>\r\n                  </View>\r\n              )}\r\n            />\r\n          )}\r\n          <GenericButton\r\n            style={styles.addButton}\r\n            onPress={handleAddPatient}\r\n            title=\"Add Patient\"\r\n            buttonWidth={160}\r\n          />\r\n           <View style={styles.toggleButtonContainer}>\r\n            <GenericButton\r\n              style={styles.toggleButton}\r\n              onPress={toggleDisplayPending}\r\n              title={isDisplayingPending ? 'Show Confirmed Patients' : 'Show Pending Patients'}\r\n              buttonWidth={250}\r\n            />\r\n          </View>\r\n          <AssociatePatient\r\n            isVisible={isAssociatePatientModalVisible}\r\n            onConfirm={handleAssociatePatientConfirm}\r\n            onCancel={handleAssociatePatientCancel}\r\n            errorMessage={message}\r\n          />\r\n          {bannerMessage && (\r\n            <BannerNotification\r\n              message={bannerMessage}\r\n              severity={bannerMessage.includes('Failed') ? 'error' : 'success'}\r\n              onClose={() => { setBannerMessage(null), fetchData() }}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 16,\r\n  },\r\n  patientContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: 8,\r\n    padding: 16,\r\n    marginBottom: 12,\r\n    elevation: 3,\r\n    shadowColor: \"green\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.2,\r\n  },\r\n  patientName: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  addButton: {\r\n    backgroundColor: \"#4CAF50\",\r\n    padding: 12,\r\n    borderRadius: 8,\r\n    alignItems: \"center\",\r\n    marginTop: 16,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    borderRadius: 4,\r\n    padding: 8,\r\n    marginBottom: 16,\r\n  },\r\n  modalButtonsContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  modalButton: {\r\n    backgroundColor: \"#4CAF50\",\r\n    padding: 12,\r\n    borderRadius: 8,\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    marginHorizontal: 8,\r\n  },\r\n  modalButtonText: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  noPatientsContainer: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flex: 1,\r\n  },\r\n  noPatientsText: {\r\n    fontSize: 18,\r\n    marginBottom: 16,\r\n  },\r\n  noPatientsImage: {\r\n    width: 200,\r\n    height: 100,\r\n  },\r\n  icon: {\r\n    color: 'green',\r\n    fontSize: 24,\r\n  },\r\n  toggleButtonContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 16,\r\n  },\r\n  toggleButton: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 12,\r\n    borderRadius: 8,\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default TherapistScreen;\r\n","import React, { useState } from 'react';\r\nimport { View, Pressable, Text, StyleSheet} from 'react-native';\r\nimport { Audio } from 'expo-av';\r\nimport { translationService } from '../../services/translationService';\r\nexport default function RecordAudio(props) {\r\n  const [recording, setRecording] = useState(null);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n\r\nconst translate = translationService.translate;\r\n  const startRecording = async () => {\r\n    try {\r\n      const recording = new Audio.Recording();\r\n      await recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);\r\n      await recording.startAsync();\r\n      setRecording(recording);\r\n      setIsRecording(true);\r\n    } catch (error) {\r\n      console.error('Failed to start recording', error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = async () => {\r\n    if (!recording) return;\r\n    console.log('recording', recording);\r\n    try {\r\n      await recording.stopAndUnloadAsync();\r\n      setIsRecording(false);\r\n      props.setRecordedData(recording.getURI());\r\n    } catch (error) {\r\n      console.error('Failed to stop recording', error);\r\n    }\r\n\r\n  };\r\n\r\n  // This is a function for the development!!!\r\n  const playRecording = async () => {\r\n    const soundObject = new Audio.Sound();\r\n\r\n    const source = recording.getURI()\r\n\r\n    await soundObject.loadAsync({ uri: source });\r\n    await soundObject.playAsync();\r\n  };\r\n  //************************************* */\r\n\r\n  const handleButtonPress = () => {\r\n    if (isRecording) {\r\n      stopRecording();\r\n    } else {\r\n      startRecording();\r\n    }\r\n  };\r\n\r\n\r\n  const buttonColor = isRecording ? 'green' : 'red';\r\n\r\n  return (\r\n    <View style={styles.container} accessible accessibilityLabel='recording'>\r\n      <Pressable\r\n        style={[styles.recordButton, { backgroundColor: buttonColor }]}\r\n        onPress={handleButtonPress}\r\n      >\r\n        <Text style={styles.buttonText} accessible >\r\n          {isRecording ? translate('stop recording') : translate('start recording')}\r\n        </Text>\r\n      </Pressable>\r\n         </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  recordButton: {\r\n    width: 100,\r\n    height: 100,\r\n    borderRadius: 50,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n  },\r\n});\r\n","import axios from \"axios\";\r\nimport { REACT_APP_BASE_URL } from \"@env\";\r\n\r\nconst patientService = {\r\n  getPatientsTherapist: async (receiverId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${REACT_APP_BASE_URL}/patient/list/${receiverId}`\r\n      );\r\n      console.log(\"receiverId 1:\", receiverId);\r\n      console.log(\"response\", response);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching therapist patients:\", error);\r\n      throw new Error(\"Error fetching therapist patients\");\r\n    }\r\n  },\r\n\r\n  getlistOfAssociatedTherapist: async (receiverId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${REACT_APP_BASE_URL}/patient/ListOfAssociatedTherapists/${receiverId}`\r\n      );\r\n      console.log(\"receiverId 2:\", receiverId);\r\n      console.log(\"response 2\", response);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching therapist patients:\", error);\r\n      throw new Error(\"Error fetching therapist patients\");\r\n    }\r\n  },\r\n\r\n  unreadNotifications: async (patientId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${REACT_APP_BASE_URL}/patient/${patientId}`\r\n      );\r\n      console.log(\"receiverId 444:\", patientId);\r\n      console.log(\"response 444\", response);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching therapist patients:\", error);\r\n      throw new Error(\"Error fetching therapist patients\");\r\n    }\r\n  },\r\n\r\n  statusChange: async (notificationId) => {\r\n    console.log(\"receiverId notificationId:\", notificationId);\r\n    try {\r\n      const response = await axios.put(\r\n        `${REACT_APP_BASE_URL}/patient/change`,\r\n        notificationId\r\n      );\r\n      console.log(\"notificationId:\", notificationId);\r\n      console.log(\"response notificationId\", response);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching therapist patients:\", error);\r\n      throw new Error(\"Error fetching therapist patients\");\r\n    }\r\n  },\r\n\r\n  statusChangeToConfirmed: async (associationsId) => {\r\n    console.log(\" associationsId:\", associationsId);\r\n    try {\r\n      const response = await axios.put(\r\n        `${REACT_APP_BASE_URL}/patient/changeAssociations`,\r\n        associationsId\r\n      );\r\n      console.log(\"associationsId:\", associationsId);\r\n      console.log(\"response associationsId\", response);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching therapist patients:\", error);\r\n      throw new Error(\"Error fetching therapist patients\");\r\n    }\r\n  },\r\n  deletingTherapist: async (deleting) => {\r\n    console.log(\"delete:\", deleting);\r\n    try {\r\n      const response = await axios.delete(\r\n        `${REACT_APP_BASE_URL}/patient/deleteFromNotification`,\r\n        // deleting\r\n        { data: deleting }\r\n      );\r\n      const responseDelete = await axios.delete(\r\n        `${REACT_APP_BASE_URL}/patient/deleteFromAssociations`,\r\n        // deleting\r\n        { data: deleting }\r\n      );\r\n      console.log(\"delete:\", deleting);\r\n      console.log(\"response 1\", response);\r\n      console.log(\"response 2\", responseDelete);\r\n\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching therapist patients:\", error);\r\n      throw new Error(\"Error fetching therapist patients\");\r\n    }\r\n  },\r\n};\r\nexport default patientService;\r\n","export const setUnreadNotification = (numOfUnread) => {\r\n  return {\r\n    type: \"SET_UNREAD_NOTIFICATION\",\r\n    payload: {\r\n      numOfUnread,\r\n    },\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Button,\r\n  Text,\r\n  StyleSheet,\r\n  Image,\r\n  ImageBackground,\r\n  ActivityIndicator,\r\n} from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigation } from \"@react-navigation/native\"; // Import useNavigation hook\r\nimport GenericButton from \"../components/shared/button\";\r\nimport RecordAudio from \"../components/recording/recording\";\r\nimport patientService from \"../services/backendServices/patientService\";\r\n\r\nimport { setUnreadNotification } from \"../redux/actions/patientAction\";\r\nimport { globalStyles } from \"../styles\";\r\n\r\nconst PatientScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const navigation = useNavigation();\r\n  const [countNotifications, setCountNotifications] = useState(\" \");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const receiverId = useSelector((state) => state.user.user.userData._id);\r\n\r\n  //gets therapists list by receiver id\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log(\"receiverId 0 \", receiverId);\r\n        const response = await patientService.unreadNotifications(receiverId);\r\n        if (response) {\r\n          dispatch(setUnreadNotification(response));\r\n          setCountNotifications(response);\r\n          console.log(\"response. \", response);\r\n        } else {\r\n          console.log(\"Invalid response data - CountNotifications:\", 0);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [receiverId, setCountNotifications]);\r\n\r\n  const user = useSelector((state) => state.user.user.userData);\r\n \r\n\r\n  if (isLoading) {\r\n    // Display a loading indicator while the data is being fetched\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"green\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {user.image && (\r\n        <Image\r\n          source={{ uri: user.image }}\r\n          style={styles.backgroundImage}\r\n          resizeMode=\"cover\"\r\n        />\r\n      )}\r\n      <View>\r\n        <View style={styles.hello}>\r\n          <Text style={styles.label}>hello {user.firstName}</Text>\r\n        </View>\r\n        <View style={styles.recordAudio}>\r\n          <RecordAudio />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    // alignItems: \"center\",\r\n    flex: 1,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  backgroundImage: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    zIndex: -1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  content: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  label: {\r\n    fontSize: 20,\r\n    marginBottom: 15,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  recordAudio: {\r\n    marginTop: 150,\r\n  },\r\n  hello: {\r\n    marginLeft: 25,\r\n    marginTop:10,\r\n\r\n\r\n  },\r\n});\r\n\r\nexport default PatientScreen;\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableWithoutFeedback } from \"react-native\";\r\nimport GenericButton from \"../shared/button\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useSelector } from \"react-redux\";\r\nimport validations from \"../../config/validations\";\r\nimport UserService from \"../../services/backendServices/userService\";\r\nimport { translationService } from \"../../services/translationService\";\r\nimport TextInputField from \"../shared/textInputField\";\r\nimport GenericForm from \"../shared/form\";\r\n\r\nconst translate = translationService.translate;\r\n\r\n// Form fields configuration\r\nconst fields = [\r\n  {\r\n    name: \"password\",\r\n    placeholder: translate(\"password\"),\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.password,\r\n    accesabilityLabel: \"password input\",\r\n    accesabilityHint: \"enter your password\",\r\n  },\r\n];\r\n\r\nexport default function AssociateTherapist() {\r\n  const navigation = useNavigation();\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const userName = useSelector((state) => state.user.user.userData.userName);\r\n  console.log(\"userName \", userName);\r\n\r\n  const onGet = async (data) => {\r\n    try {\r\n      // Set loading state to true to indicate that the login is in progress\r\n      setIsLoading(true);\r\n      const response = await UserService.loginUser({\r\n        userName: userName,\r\n        password: data.password,\r\n      });\r\n      console.log(\"response \", response);\r\n\r\n      if (response.message === \"User exists\") {\r\n        navigation.navigate(\"ManagementByTheParent\");\r\n        // Clear error message if the user exists\r\n        setErrorMessage(null);\r\n      } else {\r\n        // Set error message if the login credentials are incorrect\r\n        setErrorMessage(\"The password is incorrect, try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    } finally {\r\n      // Set loading state to false after the validation is complete\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.modalContainer}>\r\n        <Text style={styles.label}>Get Therapist </Text>\r\n        <Text style={styles.labels}>Get your therapist to Abilisense.</Text>\r\n        <Text style={styles.labels}>It's very easy to get started.</Text>\r\n\r\n        <GenericForm\r\n          accessible={true}\r\n          fields={fields}\r\n          onSubmit={onGet}\r\n          navigation={navigation}\r\n          submitButton={isLoading ? \"Verifying...\" : \"Get\"}\r\n          disabledButton={isLoading}\r\n        ></GenericForm>\r\n\r\n        <Text style={styles.errorText} accessible>\r\n          {errorMessage}\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: \"white\",\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n  },\r\n  label: {\r\n    fontSize: 25,\r\n    marginBottom: 8,\r\n  },\r\n  labels: {\r\n    fontSize: 15,\r\n    marginBottom: 8,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport GenericButton from \"../shared/button\";\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport { useSelector } from \"react-redux\";\r\nimport patientService from \"../../services/backendServices/patientService\";\r\nimport BannerNotification from \"../shared/bannerNotification\";\r\n\r\nexport default function AccessOption() {\r\n  const navigation = useNavigation();\r\n  const receiverId = useSelector((state) => state.user.user.userData._id);\r\n  const [bannerMessage, setBannerMessage] = useState(null);\r\n\r\n  const route = useRoute();\r\n  const { therapist } = route.params || {};\r\n\r\n  const handleModalCancel = async () => {\r\n    // navigation.navigate(\"GetTherapist\");\r\n    navigation.reset({\r\n      index: 0,\r\n      routes: [{ name: \"GetTherapist\" }]\r\n    });\r\n  };\r\n\r\n  const handleModalOk = async () => {\r\n    const responseChange = await patientService.statusChange({\r\n      id: therapist.id,\r\n      receiverID: receiverId,\r\n    });\r\n\r\n    console.log(\"responseChange\", responseChange);\r\n\r\n\r\n    const response = await patientService.statusChangeToConfirmed({\r\n      id: therapist.id,\r\n      receiverID: receiverId,\r\n    });\r\n    console.log(\"response\", response);\r\n    //here show banner\r\n    setBannerMessage(\r\n      `Therapist ${therapist.firstName} ${therapist.lastName} added successfully.`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.modalContainer}>\r\n        {therapist && (\r\n          <>\r\n            <Text style={styles.label}>\r\n              <Text style={{ color: \"green\" }}>\r\n                {`${therapist.firstName} ${therapist.lastName} `}\r\n              </Text>\r\n              wants to access your Abilisense account\r\n            </Text>\r\n            <Text>\r\n              This will allow\r\n              <Text style={{ color: \"green\" }}>\r\n                {` ${therapist.firstName} ${therapist.lastName} `}\r\n              </Text>\r\n              to perform operations on your Abilisense account\r\n            </Text>\r\n            <Text>\r\n              It is possible that your sensitive information will be shared with\r\n              the\r\n              <Text style={{ color: \"green\" }}>\r\n                {` ${therapist.firstName} ${therapist.lastName}`}\r\n              </Text>\r\n              .\r\n            </Text>\r\n            <Text>You can always add or remove access.</Text>\r\n          </>\r\n        )}\r\n        <View style={styles.buttonContainer}>\r\n          <GenericButton\r\n            onPress={handleModalCancel}\r\n            title=\"Cancel\"\r\n            buttonWidth={80}\r\n          />\r\n          <View style={styles.buttonSpacer} />\r\n          <GenericButton\r\n            onPress={handleModalOk}\r\n            title=\"Allow\"\r\n            buttonWidth={80}\r\n          />\r\n        </View>\r\n        {bannerMessage && (\r\n          <BannerNotification\r\n            message={bannerMessage}\r\n            severity={bannerMessage.includes(\"Failed\") ? \"error\" : \"success\"}\r\n            onClose={() => {\r\n              setBannerMessage(null),\r\n                navigation.reset({\r\n                  index: 0,\r\n                  routes: [{ name: \"GetTherapist\" }]\r\n                });\r\n            }}\r\n          />\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: \"white\",\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n  },\r\n  label: {\r\n    fontSize: 20,\r\n    marginBottom: 8,\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: \"row\", // Set the direction to row\r\n    justifyContent: \"center\", // Adjust as needed\r\n  },\r\n  buttonSpacer: {\r\n    width: 20, // Adjust as needed for the desired space\r\n  },\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Pressable,\r\n  ActivityIndicator,\r\n} from \"react-native\";\r\nimport GenericButton from \"../shared/button\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport patientService from \"../../services/backendServices/patientService\";\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\nimport { translationService } from \"../../services/translationService\";\r\nimport { setUnreadNotification } from \"../../redux/actions/patientAction\";\r\n\r\n\r\n// Translation function alias for shorter usage\r\nconst translate = translationService.translate;\r\n\r\nexport default function GetTherapist() {\r\n  const navigation = useNavigation();\r\n  const dispatch = useDispatch();\r\n  const [selectedTherapist, setSelectedTherapist] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [Therapists, setTherapists] = useState([]);\r\n  // const countNotifications = useSelector(\r\n  //   (state) => state.patient.num.numOfUnread\r\n  // );\r\n  const countNotifications = useSelector((state) => state.patient.num);\r\n  // const countNotifications = useSelector((state) => state.patient.num?.numOfUnread);\r\n\r\n  console.log(\"countNotifications:\", countNotifications);\r\n\r\n  const receiverId = useSelector((state) => state.user.user.userData._id);\r\n\r\n  //gets therapists list by receiver id\r\n  useEffect(() => {\r\n    console.log(\"1111111111111111\")\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log(\"receiverId 0 \", receiverId);\r\n        const responseTherapist = await patientService.getPatientsTherapist(\r\n          receiverId\r\n        );\r\n        if (responseTherapist && responseTherapist.therapists) {\r\n          setTherapists(responseTherapist.therapists);\r\n          // setCountNotifications(responseTherapist.count);\r\n          console.log(\"response.therapists \", responseTherapist.therapists);\r\n          // console.log(\"response.count \", responseTherapist.count);\r\n        } else {\r\n          console.error(\"Invalid response data:\", responseTherapist);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleTherapist = (therapists) => {\r\n    setSelectedTherapist(therapists);\r\n  };\r\n\r\n  const handleDone = async () => {\r\n    if (selectedTherapist) {\r\n      const { userName, firstName, lastName, id, phoneNumber } = selectedTherapist;\r\n      const therapistData = { userName, firstName, lastName, id, phoneNumber };\r\n      // const responseChange = await patientService.statusChange({\r\n      //   id: id,\r\n      //   receiverID: receiverId,\r\n      // });\r\n\r\n      // console.log(\"responseChange\", responseChange);\r\n\r\n      // if (countNotifications > 0) {\r\n      if (countNotifications.numOfUnread > 0) {\r\n        dispatch(setUnreadNotification(countNotifications.numOfUnread - 1));\r\n\r\n        // navigation.navigate(\"AccessOption\", { therapist: therapistData });\r\n      }\r\n      navigation.navigate(\"AccessOption\", { therapist: therapistData });\r\n\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  if (isLoading) {\r\n    // Display a loading indicator while the data is being fetched\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"green\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.modalContainer}>\r\n        {Therapists.length > 0 && (\r\n          <Text style={styles.label}>Look for therapists you know</Text>\r\n        )}\r\n        {/* {countNotifications === \"0\" ? ( */}\r\n        {Therapists.length === 0 ? (\r\n          <View style={styles.noPatientsContainer}>\r\n            <Text style={styles.noPatientsText}>\r\n            There are now no therapists {`\\n`}who want an affiliation from you\r\n            </Text>\r\n          </View>\r\n        ) : (\r\n          <View>\r\n            {Therapists.map((therapist) => (\r\n              <Pressable\r\n                key={therapist.userName}\r\n                onPress={() => handleTherapist(therapist)}\r\n                style={[\r\n                  styles.button,\r\n                  selectedTherapist === therapist && {\r\n                    backgroundColor: \"green\",\r\n                  },\r\n                ]}\r\n              >\r\n                <View style={styles.IconContainer}>\r\n                  <Icon\r\n                    name=\"user-md\"\r\n                    size={30}\r\n                    color={selectedTherapist === therapist ? \"white\" : \"green\"}\r\n                  />\r\n                  <View style={styles.textContainer}>\r\n                    <Text\r\n                      style={{\r\n                        color:\r\n                          selectedTherapist === therapist ? \"white\" : \"green\",\r\n                      }}\r\n                    >\r\n                      {therapist.firstName} {therapist.lastName}\r\n                    </Text>\r\n                    <Text\r\n                      style={{\r\n                        color:\r\n                          selectedTherapist === therapist ? \"white\" : \"green\",\r\n                      }}\r\n                    >\r\n                      \r\n                      {therapist.phoneNumber}\r\n                    </Text>\r\n                    <Text\r\n                      style={{\r\n                        color:\r\n                          selectedTherapist === therapist ? \"white\" : \"green\",\r\n                      }}\r\n                    >\r\n                      \r\n                      {therapist.userName}\r\n                    </Text>\r\n                  </View>\r\n                </View>\r\n              </Pressable>\r\n            ))}\r\n\r\n            <GenericButton onPress={handleDone} title=\"Done\" />\r\n          </View>\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: \"white\",\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n  },\r\n  label: {\r\n    fontSize: 20,\r\n    marginBottom: 8,\r\n  },\r\n  button: {\r\n    backgroundColor: \"white\",\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    borderRadius: 8,\r\n    paddingVertical: 10,\r\n    alignItems: \"center\",\r\n    marginTop: 16,\r\n    marginBottom: 12,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  IconContainer: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  textContainer: {\r\n    flexDirection: \"column\",\r\n    marginLeft: 8,\r\n  },\r\n  noPatientsText: {\r\n    fontSize: 18,\r\n    marginBottom: 16,\r\n  },\r\n  noPatientsContainer: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flex: 1,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Image,\r\n  Pressable,\r\n  StyleSheet,\r\n  ScrollView,\r\n  AccessibilityInfo,\r\n} from \"react-native\";\r\nimport UserService from \"../../services/backendServices/userService\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport GenericButton from \"../shared/button\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { setUser } from \"../../redux/actions/userAction\";\r\n\r\n\r\nimport option1 from \"./background_options/115.jpg\";\r\nimport option2 from \"./background_options/113.jpg\";\r\nimport option3 from \"./background_options/119.jpg\";\r\nimport option4 from \"./background_options/117.jpg\";\r\nimport option5 from \"./background_options/114.jpg\";\r\nimport option6 from \"./background_options/110.jpg\";\r\n\r\n\r\nconst backgroundOptions = [\r\n  { id: 1, image: option1 },\r\n  { id: 2, image: option2 },\r\n  { id: 3, image: option3 },\r\n  { id: 4, image: option4 },\r\n  { id: 5, image: option5 },\r\n  { id: 6, image: option6 },\r\n];\r\n\r\nconst BackgroundSelection = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const navigation = useNavigation();\r\n  const user = useSelector((state) => state.user.user.userData);\r\n  const userName = useSelector((state) => state.user.user.userData.userName);\r\n\r\n  const handleImageSelect = (imageId) => {\r\n    setSelectedImage(imageId);\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n    if (selectedImage !== null) {\r\n      const selectedOption = backgroundOptions.find(\r\n        (option) => option.id === selectedImage\r\n      );\r\n      console.log(`Image ${selectedImage} selected`);\r\n      const response = await UserService.updateImage({\r\n        userName: userName,\r\n        image: selectedOption.image,\r\n      });\r\n      const updatedUser = { ...user, image: selectedOption.image };\r\n      dispatch(setUser(updatedUser));\r\n      navigation.reset({\r\n        index: 0,\r\n        routes: [{ name: \"Patient\" }]\r\n      });\r\n    } else {\r\n      AccessibilityInfo.announceForAccessibility(\"Please select an image\");\r\n    }\r\n  };\r\n\r\n  const renderItem = (item) => (\r\n    <Pressable\r\n      key={item.id}\r\n      accessible\r\n      accessibilityLabel=\"background image\"\r\n      onPress={() => handleImageSelect(item.id)}\r\n      style={[\r\n        styles.imageContainer,\r\n        selectedImage === item.id && styles.selectedImage,\r\n      ]}\r\n    >\r\n      <Image source={item.image} style={styles.image} />\r\n    </Pressable>\r\n  );\r\n\r\n  return (\r\n    <View\r\n      style={styles.container}\r\n      accessible\r\n      accessibilityLabel=\"background image selection\"\r\n    >\r\n      {selectedImage && (\r\n        <Image\r\n          source={backgroundOptions.find(option => option.id === selectedImage).image}\r\n          style={styles.backgroundImage}\r\n        />\r\n      )}\r\n      <ScrollView contentContainerStyle={styles.scrollContainer}>\r\n        {backgroundOptions.map((option) => renderItem(option))}\r\n      </ScrollView>\r\n\r\n      <View style={styles.ConfirmButton}>\r\n        <GenericButton buttonWidth={100} title=\"Confirm\" onPress={handleConfirm} />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n\r\n  ConfirmButton:{\r\n    marginBottom: 65,\r\n\r\n  }, \r\n\r\n  backgroundImage: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    zIndex: -1, //chek that....this on 1\r\n  },\r\n\r\n  scrollContainer: {\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    marginVertical: 12,\r\n  },\r\n\r\n  imageContainer: {\r\n    margin: 5,\r\n    borderWidth: 2,\r\n    borderColor: \"transparent\",\r\n    borderRadius: 5,\r\n    overflow: \"hidden\",\r\n  },\r\n  selectedImage: {\r\n    borderColor: \"green\",\r\n  },\r\n  image: {\r\n    width: 100,\r\n    height: 120,\r\n  },\r\n});\r\n\r\nexport default BackgroundSelection;\r\n\r\n","\r\nconst ImageService = {\r\n\r\n  encode: async (imageUri) => {\r\n    try {\r\n      const response = await fetch(imageUri);\r\n      const blob = await response.blob();\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    } catch (error) {\r\n      console.log('Error encoding image', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  //for now i dont need it does nothing\r\n  decode: (encodedImage) => {\r\n    try {\r\n      const decodedImage = encodedImage;\r\n      return decodedImage;\r\n    } catch (error) {\r\n      console.log('Error decoding image', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default ImageService;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Image, View, Pressable, StyleSheet, Text } from 'react-native';\r\nimport { AntDesign } from '@expo/vector-icons';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport im1 from '../../assets/images/default-user-image.svg';\r\nimport ImageService from '../../services/imageService';\r\nimport UserService from '../../services/backendServices/userService';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function UploadImage() {\r\n  const [image, setImage] = useState(im1);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const user = useSelector((state) => state.user.user.userData);\r\n\r\n  useEffect(() => {\r\n    if (user.profileImage) {\r\n      setImage(user.profileImage);\r\n    }\r\n    checkForCameraRollPermission();\r\n  }, []);\r\n\r\n  const addImage = async () => {\r\n    let _image = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n    if (!_image.canceled) {\r\n      setErrorMessage(null);\r\n      try {\r\n        const codedImage = await ImageService.encode(_image.assets[0].uri);\r\n        const maxAllowedSize = 100 * 1024;\r\n        if (codedImage.length > maxAllowedSize) {\r\n          setImage(null);\r\n          setErrorMessage(\r\n            \"That’s a very nice photo, \\nbut it’s a bit too big.\\n Try one that’s smaller.\"\r\n          );\r\n        } else {\r\n          setImage(_image.assets[0].uri);\r\n          const response = await UserService.uploadProfileImage(\r\n            user._id,\r\n            codedImage\r\n          );\r\n          console.log(response);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        // setErrorMessage(\"Error accured. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForCameraRollPermission = async () => {\r\n    const { status } = await ImagePicker.getMediaLibraryPermissionsAsync();\r\n    if (status !== \"granted\") {\r\n      alert(\r\n        \"Please grant camera roll permissions inside your system's settings\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <View style={imageUploaderStyles.container}>\r\n        {image && (\r\n          <Image source={{ uri: image }} style={imageUploaderStyles.image} />\r\n        )}\r\n        {errorMessage && (\r\n          <Text style={imageUploaderStyles.errorMessage}>{errorMessage}</Text>\r\n        )}\r\n        <View style={imageUploaderStyles.uploadBtnContainer}>\r\n          <Pressable onPress={addImage} style={imageUploaderStyles.uploadBtn}>\r\n            <AntDesign name=\"camera\" size={20} color=\"black\" />\r\n          </Pressable>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst imageUploaderStyles = StyleSheet.create({\r\n  container: {\r\n    elevation: 2,\r\n    height: 150,\r\n    width: 150,\r\n    backgroundColor: \"#efefef\",\r\n    position: \"relative\",\r\n    borderRadius: 999,\r\n    overflow: \"hidden\",\r\n    justifyContent: \"center\",\r\n  },\r\n  image: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    resizeMode: \"cover\",\r\n  },\r\n  uploadBtnContainer: {\r\n    position: \"absolute\",\r\n    right: 0,\r\n    bottom: 0,\r\n    width: \"100%\",\r\n    height: \"30%\",\r\n  },\r\n  uploadBtn: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"transparent\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  errorMessage: {\r\n    color: \"red\",\r\n    textAlign: \"center\",\r\n    fontSize: 12,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { StyleSheet, Text, Pressable, View, TouchableWithoutFeedback } from \"react-native\";\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\nimport UploadImage from \"../shared/uploadImage\";\r\nimport { translationService } from \"../../services/translationService\";\r\n\r\nconst SideNavigator = ({ navigation, shouldDisplaySideNavigator, onLanguageChange }) => {\r\n  const [page, setPage] = useState(\"\");\r\n  const [showLanguageOptions, setShowLanguageOptions] = useState(false);\r\n  const [overlayVisible, setOverlayVisible] = useState(false);\r\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\r\n  const [showLanguageList, setShowLanguageList] = useState(true);\r\n  const user = useSelector((state) => state.user.user);\r\n  let homePage = \"\";\r\n  if (user) {\r\n    const type = user.userData.type;\r\n    if (type === \"therapist\") {\r\n      homePage = \"Therapist\";\r\n    } else if (type === \"patient\") {\r\n      homePage = \"Patient\";\r\n    }\r\n  }\r\n\r\n  const pages = [homePage, \"Manage\", \"Settings\", \"Theme\", \"Language\"];\r\n  const icons = [\"home\", \"notifications\", \"settings\", \"color-palette\", \"language\"];\r\n  const languages = [\"English\",\"Hebrew\"];\r\n  const countNotifications = useSelector((state) => state.patient.num);\r\n\r\n  useFocusEffect(() => {\r\n    const currentPage =\r\n      navigation.getState().routes[navigation.getState().index].name;\r\n    setPage(currentPage);\r\n  });\r\n\r\n  const goToFirstScreen = (pageName) => {\r\n    navigation.reset({\r\n      index: 0,\r\n      routes: [{ name: pageName }],\r\n    });\r\n  };\r\n\r\n  const handleLanguageIconClick = () => {\r\n    setPage(\"Language\");\r\n    setShowLanguageOptions(!showLanguageOptions);\r\n    setOverlayVisible(!showLanguageOptions);\r\n  };\r\n\r\n  const handleLanguageSelection = (language) => {\r\n    setSelectedLanguage(language);\r\n    onLanguageChange(language); // קריאה לפונקצית הקולבק לעדכון השפה בקומפוננטת האב\r\n  \r\n    if (language === 'Hebrew') {\r\n      console.log('נבחר עברית');\r\n      translationService.storeLanguage('he');\r\n    } else if (language === 'English') {\r\n      console.log('Selected English');\r\n      translationService.storeLanguage('en');\r\n    }\r\n  \r\n    translationService.initializeLanguage();\r\n    setShowLanguageList(false); // הסתרת רשימת השפות לאחר בחירה\r\n    console.log(\"Language selected:\", language);\r\n  };\r\n\r\n  const handleOverlayPress = () => {\r\n    setShowLanguageOptions(false);\r\n    setOverlayVisible(false);\r\n  };\r\n\r\n  if (!shouldDisplaySideNavigator) {\r\n    return null;\r\n  }\r\n  console.log(\"countNotifications\", countNotifications);\r\n\r\n  return (\r\n    <View style={styles.drawerContent}>\r\n      <TouchableWithoutFeedback onPress={handleOverlayPress}>\r\n        <View style={[styles.overlay, { display: overlayVisible ? \"flex\" : \"none\" }]} />\r\n      </TouchableWithoutFeedback>\r\n      <View style={styles.userContainer}>\r\n        <UploadImage />\r\n        {user && <Text style={styles.userName}>{user.userData.firstName}</Text>}\r\n      </View>\r\n      <View style={styles.separator} />\r\n      {pages.map((item, index) => (\r\n        <Pressable\r\n          style={styles.drawerItem}\r\n          key={index}\r\n          onPress={() => {\r\n            setPage(item);\r\n            console.log(\"item\", item);\r\n            goToFirstScreen(item);\r\n            if (item === \"Language\") {\r\n              handleLanguageIconClick();\r\n            }\r\n          }}\r\n        >\r\n          {/* Conditionally render the badge for the 'notifications' icon */}\r\n\r\n          {icons[index] === \"notifications\" &&\r\n            countNotifications &&\r\n            countNotifications.numOfUnread > 0 && (\r\n              <View style={styles.notificationBadgeContainer}>\r\n                <Text style={styles.notificationText}>\r\n                  {countNotifications.numOfUnread}\r\n                </Text>\r\n              </View>\r\n            )}\r\n          <Ionicons\r\n            name={icons[index]}\r\n            size={20}\r\n            color={page === item ? \"green\" : \"black\"}\r\n            style={styles.icon}\r\n          />\r\n          <Text style={page === item ? { color: \"green\" } : { color: \"black\" }}>\r\n            {item}\r\n          </Text>\r\n        </Pressable>\r\n      ))}\r\n      \r\n      {showLanguageOptions && (\r\n        <View>\r\n        {languages.map((item, index) => (\r\n          <Pressable\r\n            style={styles.language}\r\n            key={index}\r\n            onPress={() => handleLanguageSelection(item)}\r\n            // onPress={() => {\r\n              // setPage(item);\r\n              // setSelectedLanguage(item);\r\n              // if (item === 'Hebrew') {\r\n              //   console.log('נבחר עברית');\r\n              //   translationService.storeLanguage('he');\r\n                \r\n              // } else if (item === 'English') {\r\n              //   console.log('Selected English');\r\n              //   translationService.storeLanguage('en');\r\n              // }\r\n              // translationService.initializeLanguage();\r\n          \r\n              // setShowLanguageList(false);\r\n              // console.log(\"Language selected:\", item);\r\n              // goToFirstScreen(item);\r\n            // }} \r\n          >\r\n            <Text style={page === item ? { color: \"green\" } : { color: \"black\" }}>\r\n              {item}\r\n            </Text>\r\n          </Pressable>\r\n        ))}\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  drawerContent: {\r\n    flex: 1,\r\n    paddingTop: 50,\r\n    paddingLeft: 20,\r\n  },\r\n  drawerItem: {\r\n    marginBottom: 20,\r\n    flexDirection: \"row\", // Add this line\r\n  },\r\n  // iconTextContainer: {\r\n  //   flexDirection: \"row\",\r\n  //   alignItems: \"center\",\r\n  // },\r\n  icon: {\r\n    marginRight: 8,\r\n  },\r\n  userContainer: {\r\n    alignItems: \"center\",\r\n    marginBottom: 10,\r\n  },\r\n  userIcon: {\r\n    marginRight: 8,\r\n  },\r\n  userName: {\r\n    fontSize: 16,\r\n    marginRight: 10,\r\n  },\r\n  separator: {\r\n    height: 1,\r\n    backgroundColor: \"black\",\r\n    marginBottom: 10,\r\n  },\r\n  notificationBadgeContainer: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    backgroundColor: \"green\",\r\n    borderRadius: 10,\r\n    width: 11,\r\n    height: 11,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    border: \"1px solid white\",\r\n  },\r\n\r\n  notificationText: {\r\n    color: \"white\",\r\n    fontSize: 8,\r\n  },\r\n  language:{\r\n    marginBottom: 15,\r\n    flexDirection: \"row\",\r\n    marginLeft: 30,\r\n    \r\n  },\r\n});\r\n\r\nexport default SideNavigator;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  Pressable,\r\n} from \"react-native\";\r\nimport patientService from \"../../services/backendServices/patientService\";\r\nimport { useSelector } from \"react-redux\";\r\nimport GenericButton from \"../shared/button\";\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\nimport BannerNotification from \"../shared/bannerNotification\";\r\n\r\nexport default function ListOfAssociatedTherapists() {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedTherapist, setSelectedTherapist] = useState(null);\r\n  const [Therapists, setTherapists] = useState([]);\r\n  const [bannerMessage, setBannerMessage] = useState(null);\r\n\r\n  const receiverId = useSelector((state) => state.user.user.userData._id);\r\n\r\n  //gets therapists list by receiver id\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [receiverId]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      console.log(\"receiverId 2 \", receiverId);\r\n      const responseTherapist =\r\n        await patientService.getlistOfAssociatedTherapist(receiverId);\r\n      if (responseTherapist && responseTherapist.therapists) {\r\n        setTherapists(responseTherapist.therapists);\r\n        // setCountNotifications(responseTherapist.count);\r\n        console.log(\"response.therapists \", responseTherapist.therapists);\r\n        // console.log(\"response.count \", responseTherapist.count);\r\n      } else {\r\n        console.error(\"Invalid response data:\", responseTherapist);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    // Display a loading indicator while the data is being fetched\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"green\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const handleTherapist = (therapists) => {\r\n    setSelectedTherapist(therapists);\r\n  };\r\n\r\n  const handleTrash = async () => {\r\n    if (selectedTherapist) {\r\n      const { userName, firstName, lastName, id, phoneNumber } = selectedTherapist;\r\n      const therapistData = { userName, firstName, lastName, id,phoneNumber };\r\n      const responseDelete = await patientService.deletingTherapist({\r\n        id: id,\r\n        receiverID: receiverId,\r\n      });\r\n      console.log(\"responseDelete\", responseDelete);\r\n      setBannerMessage(\r\n        `Therapist ${firstName} ${lastName} deleted successfully.`\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.modalContainer}>\r\n        {Therapists.length > 0 && (\r\n          <Text style={styles.label}>My Therapists</Text>\r\n        )}\r\n        {Therapists.length === 0 ? (\r\n          <View style={styles.noPatientsContainer}>\r\n            <Text style={styles.noPatientsText}>You do not yet have therapist {`\\n`}associated with you</Text>\r\n          </View>\r\n        ) : (\r\n          <View>\r\n            {Therapists.map((therapist) => (\r\n              <Pressable\r\n                key={therapist.userName}\r\n                onPress={() => handleTherapist(therapist)}\r\n                style={[\r\n                  styles.button,\r\n                  selectedTherapist === therapist && {\r\n                    backgroundColor: \"green\",\r\n                  },\r\n                ]}\r\n              >\r\n                <View style={styles.IconContainer}>\r\n                  <View style={styles.Icon}>\r\n                    <Icon\r\n                      name=\"user-md\"\r\n                      size={30}\r\n                      color={\r\n                        selectedTherapist === therapist ? \"white\" : \"green\"\r\n                      }\r\n                    />\r\n                  </View>\r\n                  <View style={styles.textContainer}>\r\n                    <Text\r\n                      style={{\r\n                        color:\r\n                          selectedTherapist === therapist ? \"white\" : \"green\",\r\n                      }}\r\n                    >\r\n                      {therapist.firstName} {therapist.lastName}\r\n                      \r\n                    </Text>\r\n                    <Text\r\n                      style={{\r\n                        color:\r\n                          selectedTherapist === therapist ? \"white\" : \"green\",\r\n                      }}\r\n                    >\r\n                      {therapist.phoneNumber}\r\n                    </Text>\r\n                    <Text\r\n                      style={{\r\n                        color:\r\n                          selectedTherapist === therapist ? \"white\" : \"green\",\r\n                      }}\r\n                    >\r\n                      {therapist.userName}\r\n                    </Text>\r\n                  </View>\r\n                  <View style={styles.Icon}>\r\n                    <Pressable onPress={handleTrash}>\r\n                      <Icon\r\n                        name=\"trash\"\r\n                        size={27}\r\n                        color={\r\n                          selectedTherapist === therapist ? \"white\" : \"green\"\r\n                        }\r\n                      />\r\n                    </Pressable>\r\n                  </View>\r\n                </View>\r\n              </Pressable>\r\n            ))}\r\n            {/* <GenericButton\r\n                //  onPress={handleDone}\r\n                title=\"Done\"\r\n              />*/}\r\n          </View>\r\n        )}\r\n        {bannerMessage && (\r\n          <BannerNotification\r\n            message={bannerMessage}\r\n            severity={bannerMessage.includes(\"Failed\") ? \"error\" : \"success\"}\r\n            onClose={() => {\r\n              setBannerMessage(null), fetchData();\r\n            }}\r\n          />\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: \"white\",\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n  },\r\n  label: {\r\n    fontSize: 20,\r\n    marginBottom: 15,\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"white\",\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    borderRadius: 8,\r\n    paddingVertical: 10,\r\n    alignItems: \"center\",\r\n    marginTop: 16,\r\n    marginBottom: 12,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  IconContainer: {\r\n    marginRight: 8,\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  textContainer: {\r\n    flexDirection: \"column\",\r\n    marginLeft: 8,\r\n  },\r\n  noPatientsText: {\r\n    fontSize: 18,\r\n    marginBottom: 16,\r\n  },\r\n  noPatientsContainer: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flex: 1,\r\n  },\r\n  Icon: {\r\n    marginLeft: 8,\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n","import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, ActivityIndicator, ScrollView, Pressable } from 'react-native';\r\nimport therapistService from '../../services/backendServices/therapistService';\r\nimport GenericButton from '../shared/button';\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\n\r\n\r\nconst PatientDetails = ({ route }) => {\r\n  const { patientId } = route.params;\r\n  const [patientDetails, setPatientDetails] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [patientId]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const details = await therapistService.getPatientsDetailes(patientId);\r\n      setPatientDetails(details);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddWord = async () => {\r\n    try {\r\n      console.log(\"adding new word\")\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleRecordingIconPress = (recording) => {\r\n    // Log the recording or perform any other action\r\n    console.log('Clicked on recording icon. Recording:', recording);\r\n  };\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={styles.container}>\r\n      {isLoading ? (\r\n        <ActivityIndicator size=\"large\" color=\"green\" />\r\n      ) : patientDetails ? (\r\n        <View>\r\n          <Text style={styles.title}>{`Patient: ${patientDetails.patient.firstName} ${patientDetails.patient.lastName}`}</Text>\r\n          {patientDetails.words.words ? (\r\n            <View>\r\n              <Text style={styles.subtitle}>Words:</Text>\r\n              <View>\r\n                {patientDetails.words && patientDetails.words.words.map((word, index) => (\r\n                  <View key={index} style={styles.wordContainer}>\r\n                    <Pressable onPress={() => handleRecordingIconPress(word.recording)}>\r\n                      <Icon name=\"microphone\" size={20} color=\"green\" />\r\n                    </Pressable>\r\n                    <Text style={styles.translationText}>{`Translation: ${word.translation}`}</Text>\r\n                  </View>\r\n                ))}\r\n              </View>\r\n            </View>\r\n          ) : (\r\n            <Text style={styles.infoText}>No words available for this patient</Text>\r\n          )}\r\n          <GenericButton onPress={handleAddWord} title='Add new word' buttonWidth={120}></GenericButton>\r\n        </View>\r\n      ) : (\r\n        <Text style={styles.infoText}>No patient details available</Text>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexGrow: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: 170,\r\n  },\r\n  title: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n  },\r\n  wordContainer: {\r\n    flexDirection: 'row', // Make children align horizontally\r\n    alignItems: 'center', \r\n    marginBottom: 10,\r\n  },\r\n  translationText: {\r\n    marginLeft: 15, // Add margin between icon and text\r\n  },\r\n  infoText: {\r\n    fontSize: 16,\r\n    fontStyle: 'italic',\r\n    color: '#666',\r\n  },\r\n});\r\n\r\nexport default PatientDetails;\r\n","import { useNavigation } from \"@react-navigation/core\";\r\nimport React from \"react\";\r\nimport { View } from \"react-native-animatable\";\r\nimport GenericButton from \"../shared/button\";\r\nimport { globalStyles } from '../../styles';\r\n\r\n\r\nexport default function ManagementByTheParent() {\r\n    const navigation = useNavigation();\r\n\r\n    const handleMyTherapist = () => {\r\n        navigation.navigate(\"ListOfAssociatedTherapists\");\r\n      };\r\n      const handleNewTherapist = () => {\r\n        navigation.navigate(\"GetTherapist\");\r\n      };\r\n    return(\r\n    <View style={globalStyles.whitePaper}>\r\n        <GenericButton onPress={handleNewTherapist} title=\"New Therapist\" buttonWidth={150}/>\r\n\r\n        <GenericButton onPress={handleMyTherapist} title=\"My Therapist\" buttonWidth={150}/>\r\n\r\n    </View>)\r\n}\r\n","import \"react-native-gesture-handler\";\r\nimport React, { useState } from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\r\nimport { Provider } from \"react-redux\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport LandingScreen from \"./pages/landing\";\r\nimport RegistrationScreen from \"./pages/register\";\r\nimport LoginScreen from \"./pages/login\";\r\nimport ForgotPassword from \"./pages/forgotPassword\";\r\nimport CodeFromTheEmail from \"./components/login/codeFromTheEmail\";\r\nimport NewPassword from \"./components/login/newPassword\";\r\nimport store from \"./redux/store\";\r\nimport TherapistScreen from \"./pages/therapist\";\r\nimport PatientScreen from \"./pages/patient\";\r\nimport AssociatePatient from \"./components/therapist/associatePatient\";\r\nimport AssociateTherapist from \"./components/patient/associateTherapist\";\r\nimport AccessOption from \"./components/patient/accessOption\";\r\nimport GetTherapist from \"./components/patient/getTherapist\";\r\nimport BackgroundSelection from \"./components/side_bar/background_selection\";\r\nimport SideNavigator from \"./components/drawer/side\";\r\nimport ListOfAssociatedTherapists from \"./components/patient/listOfAssociatedTherapists\";\r\nimport PatientDetails from \"./components/therapist/patientDetailes\";\r\nimport ManagementByTheParent from \"./components/patient/managementByTheParent\";\r\n\r\nconst Drawer = createDrawerNavigator();\r\n\r\nconst App = () => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState(\"English\");\r\n\r\n  const handleLanguageChange = (language) => {\r\n    setSelectedLanguage(language);\r\n  };\r\n  return (\r\n    \r\n    <Provider store={store}>\r\n      <NavigationContainer>\r\n        <Drawer.Navigator\r\n          drawerContent={(props) => (\r\n            <SideNavigator\r\n              {...props}\r\n              shouldDisplaySideNavigator={\r\n                props.state.routes[props.state.index].name !== \"Login\" &&\r\n                props.state.routes[props.state.index].name !== \"Registration\" &&\r\n                props.state.routes[props.state.index].name !== \"Landing\" &&\r\n                props.state.routes[props.state.index].name !== \"ForgotYourPassword\" &&\r\n                props.state.routes[props.state.index].name !== \"CodeFromTheEmail\" &&\r\n                props.state.routes[props.state.index].name !== \"NewPassword\"\r\n              }\r\n            />\r\n          )}\r\n          drawerPosition={selectedLanguage === \"Hebrew\" ? \"right\" : \"left\"}\r\n\r\n          \r\n        >\r\n          <Drawer.Screen\r\n            name=\"Landing\"\r\n            component={LandingScreen}\r\n            options={{ headerShown: false }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Login\"\r\n            component={LoginScreen}\r\n            options={{ headerShown: false }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"ForgotYourPassword\"\r\n            component={ForgotPassword}\r\n            options={{ headerShown: false }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"NewPassword\"\r\n            component={NewPassword}\r\n            options={{ headerShown: false }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"CodeFromTheEmail\"\r\n            component={CodeFromTheEmail}\r\n            options={{ headerShown: false }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Registration\"\r\n            component={RegistrationScreen}\r\n            options={{ headerShown: false }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Therapist\"\r\n            component={TherapistScreen}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Patient\"\r\n            component={PatientScreen}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Association\"\r\n            component={AssociatePatient}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"GetTherapist\"\r\n            component={GetTherapist}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"AccessOption\"\r\n            component={AccessOption}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"ListOfAssociatedTherapists\"\r\n            component={ListOfAssociatedTherapists}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"PatientDetails\"\r\n            component={PatientDetails}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"ManagementByTheParent\"\r\n            component={ManagementByTheParent}\r\n            options={{ title: \"\" }}\r\n          />\r\n\r\n          {/* all these will appear in the sidebar */}\r\n          {/* <Drawer.Screen name=\"Home\" component={BackgroundSelection} options={{ title: \"\" }} /> */}\r\n          <Drawer.Screen\r\n            name=\"Theme\"\r\n            component={BackgroundSelection}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Manage\"\r\n            component={AssociateTherapist}\r\n            options={{ title: \"\" }}\r\n          />\r\n          <Drawer.Screen\r\n            name=\"Settings\"\r\n            component={PatientScreen}\r\n            options={{ title: \"\" }}\r\n          />\r\n\r\n        </Drawer.Navigator>\r\n      </NavigationContainer>\r\n    </Provider>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\nexport default App;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [959], () => (__webpack_require__(6271)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["i18n","I18n","translations","en","enTranslations","he","heTranslations","translationService","getLanguage","locale","storeLanguage","_storeLanguage","_asyncToGenerator","language","AsyncStorage","setItem","e","console","log","_x","apply","arguments","getLanguageFromStorage","_getLanguageFromStorage","getItem","initializeLanguage","_initializeLanguage","storedLanguage","error","translate","word","t","globalStyles","StyleSheet","create","whitePaper","backgroundColor","padding","borderRadius","borderWidth","borderColor","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","marginTop","maxWidth","alignSelf","alignItems","justifyContent","styles","button","paddingVertical","marginBottom","buttonText","color","fontWeight","fontSize","_ref","onPress","title","isDisabled","buttonWidth","_jsx","Pressable","accessible","accessibilityLabel","style","opacity","children","Text","container","position","input","eyeIcon","right","top","value","onChangeText","placeholder","secure","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_jsxs","View","TextInput","text","secureTextEntry","MaterialCommunityIcons","name","size","flex","link","textDecorationLine","fields","onSubmit","submitButton","disabledButton","navigation","_useForm","useForm","mode","control","trigger","handleSubmit","setValue","errors","formState","handleInputChange","_ref2","field","_x2","handlePickerChange","_ref3","_x3","_x4","map","type","Controller","render","_ref4","TextInputField","rules","defaultValue","_ref5","Picker","selectedValue","onValueChange","itemValue","options","option","Item","label","handleLinkPress","message","GenericButton","email","required","pattern","maxLength","phoneNumber","minLength","password","repeatPassword","validate","code","client","server","storage","MMKV","storedToken","getString","createUser","_createUser","user","_response$data","axios","post","data","token","userId","set","response","status","Error","getUserDetails","_getUserDetails","get","params","userName","headers","Authorization","newToken","updateUsersPassword","update","put","then","loginUser","_loginUser","userLogin","updateImage","_updateImage","image","uploadProfileImage","_uploadProfileImage","encodedImage","_x5","setUser","userData","payload","errorText","validations","accesabilityLabel","accesabilityHint","navigate","Login","dispatch","useDispatch","useNavigation","errorMessage","setErrorMessage","_useState3","_useState4","isLoading","setIsLoading","UserService","_objectSpread","_id","GenericForm","LandingScreen","showLoading","setShowLoading","fadeIn","useRef","Animated","Value","current","scaleValue","useEffect","startScaleAnimation","timing","toValue","duration","useNativeDriver","start","loop","sequence","easing","Easing","linear","iterations","Image","source","image100","resizeMode","TouchableOpacity","startButtonContainer","activeOpacity","startButton","transform","scale","startButtonText","loadingContainer","bottom","textAlign","left","severity","onClose","isModalVisible","setIsModalVisible","timer","setTimeout","clearTimeout","halfScreenWidth","Dimensions","Modal","isVisible","animationIn","animationOut","backdropOpacity","userTypeOptions","RegistrationForm","notification","setNotification","dataWithUserId","BannerNotification","RegistrationScreen","LoginScreen","createSendTheEmail","sendTheEmail","createCodeFromEmail","codeFromEmail","ForgotYourPassword","SendTheEmailService","_error$response","toString","ForgotPassword","state","CodeFromTheEmail","setError","_useState5","_useState6","isButtonDisabled","setIsButtonDisabled","_useState7","_useState8","disableUntil","setDisableUntil","_useState9","_useState10","remainingTime","setRemainingTime","Date","getTime","timeoutId","setInterval","prevTime","enableTimeoutId","clearInterval","HandleVerification","Code","sendTheEmailService","validationResult","reset","index","routes","Math","floor","ceil","modalContent","NewPassword","route","setMessage","newPassword","initialState","length","undefined","action","num","rootReducer","combineReducers","userReducer","patient","patientReducer","createStore","getTherapistPatients","_getTherapistPatients","therapistId","sendNotificationToPatient","_sendNotificationToPatient","patientUserName","unAssociatePatient","_unAssociatePatient","patientId","delete","success","getPatientsDetailes","_getPatientsDetailes","_x6","modalContainer","onConfirm","onCancel","newPatientUsername","setNewPatientUsername","visible","transparent","trim","header","patientContainer","patientName","addButton","modalButtonsContainer","flexDirection","modalButton","marginHorizontal","modalButtonText","noPatientsContainer","noPatientsText","noPatientsImage","icon","toggleButtonContainer","toggleButton","patients","setPatients","filteredPatients","setFilteredPatients","isAssociatePatientModalVisible","setAssociatePatientModalVisible","bannerMessage","setBannerMessage","_useState11","_useState12","useSelector","_useState13","_useState14","isDisplayingPending","setIsDisplayingPending","fetchData","patientsData","therapistService","confirmedPatients","filter","handleAssociatePatientConfirm","patientUsername","isUserNameExists","some","patientDetails","notificationStatus","handleRemoveSinglePatient","deletion","firstName","lastName","getStatusColor","_Fragment","NoPatientsImage","FlatList","keyExtractor","item","renderItem","Ionicons","patientsToDisplay","AssociatePatient","includes","RecordAudio","props","recording","setRecording","isRecording","setIsRecording","startRecording","Audio","prepareToRecordAsync","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","startAsync","stopRecording","stopAndUnloadAsync","setRecordedData","getURI","buttonColor","soundObject","loadAsync","uri","playAsync","recordButton","getPatientsTherapist","_getPatientsTherapist","receiverId","getlistOfAssociatedTherapist","_getlistOfAssociatedTherapist","unreadNotifications","_unreadNotifications","statusChange","_statusChange","notificationId","statusChangeToConfirmed","_statusChangeToConfirmed","associationsId","deletingTherapist","_deletingTherapist","deleting","responseDelete","setUnreadNotification","numOfUnread","backgroundImage","zIndex","content","recordAudio","hello","marginLeft","setCountNotifications","patientService","ActivityIndicator","AssociateTherapist","onGet","labels","AccessOption","therapist","useRoute","handleModalCancel","handleModalOk","responseChange","id","receiverID","buttonContainer","buttonSpacer","GetTherapist","selectedTherapist","setSelectedTherapist","Therapists","setTherapists","countNotifications","responseTherapist","therapists","handleDone","therapistData","IconContainer","Icon","textContainer","backgroundOptions","ConfirmButton","scrollContainer","flexWrap","marginVertical","imageContainer","margin","overflow","selectedImage","setSelectedImage","handleConfirm","selectedOption","find","updatedUser","AccessibilityInfo","announceForAccessibility","imageId","ScrollView","contentContainerStyle","encode","_encode","imageUri","fetch","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","decode","UploadImage","setImage","profileImage","checkForCameraRollPermission","addImage","_image","ImagePicker","launchImageLibraryAsync","mediaTypes","Images","allowsEditing","aspect","quality","canceled","codedImage","ImageService","assets","getMediaLibraryPermissionsAsync","alert","imageUploaderStyles","uploadBtnContainer","uploadBtn","AntDesign","drawerContent","paddingTop","paddingLeft","drawerItem","marginRight","userContainer","userIcon","separator","notificationBadgeContainer","border","notificationText","shouldDisplaySideNavigator","onLanguageChange","page","setPage","showLanguageOptions","setShowLanguageOptions","overlayVisible","setOverlayVisible","setSelectedLanguage","setShowLanguageList","homePage","pages","icons","useFocusEffect","currentPage","getState","TouchableWithoutFeedback","overlay","display","pageName","ListOfAssociatedTherapists","handleTrash","flexGrow","subtitle","wordContainer","translationText","infoText","fontStyle","setPatientDetails","details","handleAddWord","words","translation","ManagementByTheParent","Drawer","createDrawerNavigator","selectedLanguage","Provider","store","NavigationContainer","Navigator","SideNavigator","drawerPosition","Screen","component","headerShown","TherapistScreen","PatientScreen","PatientDetails","BackgroundSelection","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","leafPrototypes","getProto","getPrototypeOf","obj","this","ns","def","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","g","globalThis","Function","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}