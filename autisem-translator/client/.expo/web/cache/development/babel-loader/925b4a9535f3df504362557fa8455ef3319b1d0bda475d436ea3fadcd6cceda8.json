{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport GenericForm from \"../shared/form\";\nimport validations from \"../shared/validations\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar fields = [{\n  name: \"Password\",\n  state: \"password\",\n  placeholder: \"Enter new Password\",\n  type: \"text\",\n  secureTextEntry: true,\n  rules: validations.password\n}, {\n  name: \"RepeatPassword\",\n  state: \"repeatPassword\",\n  placeholder: \"Enter repeat Password\",\n  type: \"text\",\n  secureTextEntry: true,\n  rules: validations.repeatPassword\n}];\nexport default function NewPassword() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    passwordsMatch = _useState2[0],\n    setPasswordsMatch = _useState2[1];\n  var onSubmit = function onSubmit(formData) {\n    if (formData.Password === formData.RepeatPassword) {\n      console.log(\"New Password:\", formData.Password);\n      console.log(\"Repeat Password:\", formData.RepeatPassword);\n      setPasswordsMatch(true);\n    } else {\n      setPasswordsMatch(false);\n      console.log(\"Passwords do not match!\");\n    }\n  };\n  return _jsxs(View, {\n    children: [_jsx(GenericForm, {\n      fields: fields,\n      onSubmit: onSubmit,\n      submitButton: \"Save\"\n    }), !passwordsMatch && _jsx(Text, {\n      style: {\n        color: \"red\"\n      },\n      children: \"Passwords do not match!\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","GenericForm","validations","jsx","_jsx","jsxs","_jsxs","fields","name","state","placeholder","type","secureTextEntry","rules","password","repeatPassword","NewPassword","_useState","_useState2","_slicedToArray","passwordsMatch","setPasswordsMatch","onSubmit","formData","Password","RepeatPassword","console","log","children","submitButton","style","color"],"sources":["C:/abilisense/project3/autisem-translator/client/components/login/newPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text} from \"react-native\";\r\nimport GenericForm from \"../shared/form\";\r\nimport validations from \"../shared/validations\";\r\n\r\nconst fields = [\r\n  {\r\n    name: \"Password\",\r\n    state: \"password\",\r\n    placeholder: \"Enter new Password\",\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.password,\r\n  },\r\n  {\r\n    name: \"RepeatPassword\",\r\n    state: \"repeatPassword\",\r\n    placeholder: \"Enter repeat Password\",\r\n    type: \"text\",\r\n    secureTextEntry: true,\r\n    rules: validations.repeatPassword,\r\n  },\r\n];\r\n\r\nexport default function NewPassword() {\r\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\r\n\r\n  const onSubmit = (formData) => {\r\n    \r\n\r\n    // Check if passwords match\r\n    if (formData.Password === formData.RepeatPassword) {\r\n      // Passwords match, continue with your logic\r\n      console.log(\"New Password:\", formData.Password);\r\n      console.log(\"Repeat Password:\", formData.RepeatPassword);\r\n      setPasswordsMatch(true);\r\n      // Assuming you have a function to handle the submission, call it here\r\n      // handleSubmission(formData);\r\n      // Add your form submission logic here\r\n    // `formData` contains the values of all form fields\r\n    } else {\r\n      // Passwords do not match, show an error message\r\n      setPasswordsMatch(false);\r\n      console.log(\"Passwords do not match!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n     \r\n\r\n      <GenericForm\r\n        fields={fields}\r\n        onSubmit={onSubmit}\r\n        submitButton=\"Save\"\r\n      ></GenericForm>\r\n\r\n{!passwordsMatch && (\r\n        <Text style={{ color: \"red\" }}>Passwords do not match!</Text>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAExC,OAAOC,WAAW;AAClB,OAAOC,WAAW;AAA8B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEhD,IAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,UAAU;EACjBC,WAAW,EAAE,oBAAoB;EACjCC,IAAI,EAAE,MAAM;EACZC,eAAe,EAAE,IAAI;EACrBC,KAAK,EAAEX,WAAW,CAACY;AACrB,CAAC,EACD;EACEN,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,gBAAgB;EACvBC,WAAW,EAAE,uBAAuB;EACpCC,IAAI,EAAE,MAAM;EACZC,eAAe,EAAE,IAAI;EACrBC,KAAK,EAAEX,WAAW,CAACa;AACrB,CAAC,CACF;AAED,eAAe,SAASC,WAAWA,CAAA,EAAG;EACpC,IAAAC,SAAA,GAA4CnB,QAAQ,CAAC,IAAI,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAExC,IAAMI,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,QAAQ,EAAK;IAI7B,IAAIA,QAAQ,CAACC,QAAQ,KAAKD,QAAQ,CAACE,cAAc,EAAE;MAEjDC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,QAAQ,CAACC,QAAQ,CAAC;MAC/CE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,QAAQ,CAACE,cAAc,CAAC;MACxDJ,iBAAiB,CAAC,IAAI,CAAC;IAKzB,CAAC,MAAM;MAELA,iBAAiB,CAAC,KAAK,CAAC;MACxBK,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACxC;EACF,CAAC;EAED,OACErB,KAAA,CAACP,IAAI;IAAA6B,QAAA,GAGHxB,IAAA,CAACH,WAAW;MACVM,MAAM,EAAEA,MAAO;MACfe,QAAQ,EAAEA,QAAS;MACnBO,YAAY,EAAC;IAAM,CACP,CAAC,EAEpB,CAACT,cAAc,IACRhB,IAAA,CAACJ,IAAI;MAAC8B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAH,QAAA,EAAC;IAAuB,CAAM,CAC7D;EAAA,CACG,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}