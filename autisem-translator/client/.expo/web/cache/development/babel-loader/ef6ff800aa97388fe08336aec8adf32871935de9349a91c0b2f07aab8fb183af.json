{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNAudioRecorderPlayer = NativeModules.RNAudioRecorderPlayer;\nexport var AudioSourceAndroidType = function (AudioSourceAndroidType) {\n  AudioSourceAndroidType[AudioSourceAndroidType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"MIC\"] = 1] = \"MIC\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"VOICE_UPLINK\"] = 2] = \"VOICE_UPLINK\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"VOICE_DOWNLINK\"] = 3] = \"VOICE_DOWNLINK\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"VOICE_CALL\"] = 4] = \"VOICE_CALL\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"CAMCORDER\"] = 5] = \"CAMCORDER\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"VOICE_RECOGNITION\"] = 6] = \"VOICE_RECOGNITION\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"VOICE_COMMUNICATION\"] = 7] = \"VOICE_COMMUNICATION\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"REMOTE_SUBMIX\"] = 8] = \"REMOTE_SUBMIX\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"UNPROCESSED\"] = 9] = \"UNPROCESSED\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"RADIO_TUNER\"] = 1998] = \"RADIO_TUNER\";\n  AudioSourceAndroidType[AudioSourceAndroidType[\"HOTWORD\"] = 1999] = \"HOTWORD\";\n  return AudioSourceAndroidType;\n}({});\nexport var OutputFormatAndroidType = function (OutputFormatAndroidType) {\n  OutputFormatAndroidType[OutputFormatAndroidType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"THREE_GPP\"] = 1] = \"THREE_GPP\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"MPEG_4\"] = 2] = \"MPEG_4\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"AMR_NB\"] = 3] = \"AMR_NB\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"AMR_WB\"] = 4] = \"AMR_WB\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"AAC_ADIF\"] = 5] = \"AAC_ADIF\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"AAC_ADTS\"] = 6] = \"AAC_ADTS\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"OUTPUT_FORMAT_RTP_AVP\"] = 7] = \"OUTPUT_FORMAT_RTP_AVP\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"MPEG_2_TS\"] = 8] = \"MPEG_2_TS\";\n  OutputFormatAndroidType[OutputFormatAndroidType[\"WEBM\"] = 9] = \"WEBM\";\n  return OutputFormatAndroidType;\n}({});\nexport var AudioEncoderAndroidType = function (AudioEncoderAndroidType) {\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"AMR_NB\"] = 1] = \"AMR_NB\";\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"AMR_WB\"] = 2] = \"AMR_WB\";\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"AAC\"] = 3] = \"AAC\";\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"HE_AAC\"] = 4] = \"HE_AAC\";\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"AAC_ELD\"] = 5] = \"AAC_ELD\";\n  AudioEncoderAndroidType[AudioEncoderAndroidType[\"VORBIS\"] = 6] = \"VORBIS\";\n  return AudioEncoderAndroidType;\n}({});\nexport var AVEncodingOption = function (AVEncodingOption) {\n  AVEncodingOption[\"lpcm\"] = \"lpcm\";\n  AVEncodingOption[\"ima4\"] = \"ima4\";\n  AVEncodingOption[\"aac\"] = \"aac\";\n  AVEncodingOption[\"MAC3\"] = \"MAC3\";\n  AVEncodingOption[\"MAC6\"] = \"MAC6\";\n  AVEncodingOption[\"ulaw\"] = \"ulaw\";\n  AVEncodingOption[\"alaw\"] = \"alaw\";\n  AVEncodingOption[\"mp1\"] = \"mp1\";\n  AVEncodingOption[\"mp2\"] = \"mp2\";\n  AVEncodingOption[\"mp4\"] = \"mp4\";\n  AVEncodingOption[\"alac\"] = \"alac\";\n  AVEncodingOption[\"amr\"] = \"amr\";\n  AVEncodingOption[\"flac\"] = \"flac\";\n  AVEncodingOption[\"opus\"] = \"opus\";\n  AVEncodingOption[\"wav\"] = \"wav\";\n  return AVEncodingOption;\n}({});\nexport var AVModeIOSOption = function (AVModeIOSOption) {\n  AVModeIOSOption[\"gamechat\"] = \"gamechat\";\n  AVModeIOSOption[\"measurement\"] = \"measurement\";\n  AVModeIOSOption[\"movieplayback\"] = \"movieplayback\";\n  AVModeIOSOption[\"spokenaudio\"] = \"spokenaudio\";\n  AVModeIOSOption[\"videochat\"] = \"videochat\";\n  AVModeIOSOption[\"videorecording\"] = \"videorecording\";\n  AVModeIOSOption[\"voicechat\"] = \"voicechat\";\n  AVModeIOSOption[\"voiceprompt\"] = \"voiceprompt\";\n  return AVModeIOSOption;\n}({});\nexport var AVEncoderAudioQualityIOSType = function (AVEncoderAudioQualityIOSType) {\n  AVEncoderAudioQualityIOSType[AVEncoderAudioQualityIOSType[\"min\"] = 0] = \"min\";\n  AVEncoderAudioQualityIOSType[AVEncoderAudioQualityIOSType[\"low\"] = 32] = \"low\";\n  AVEncoderAudioQualityIOSType[AVEncoderAudioQualityIOSType[\"medium\"] = 64] = \"medium\";\n  AVEncoderAudioQualityIOSType[AVEncoderAudioQualityIOSType[\"high\"] = 96] = \"high\";\n  AVEncoderAudioQualityIOSType[AVEncoderAudioQualityIOSType[\"max\"] = 127] = \"max\";\n  return AVEncoderAudioQualityIOSType;\n}({});\nexport var AVLinearPCMBitDepthKeyIOSType = function (AVLinearPCMBitDepthKeyIOSType) {\n  AVLinearPCMBitDepthKeyIOSType[AVLinearPCMBitDepthKeyIOSType[\"bit8\"] = 8] = \"bit8\";\n  AVLinearPCMBitDepthKeyIOSType[AVLinearPCMBitDepthKeyIOSType[\"bit16\"] = 16] = \"bit16\";\n  AVLinearPCMBitDepthKeyIOSType[AVLinearPCMBitDepthKeyIOSType[\"bit24\"] = 24] = \"bit24\";\n  AVLinearPCMBitDepthKeyIOSType[AVLinearPCMBitDepthKeyIOSType[\"bit32\"] = 32] = \"bit32\";\n  return AVLinearPCMBitDepthKeyIOSType;\n}({});\nvar pad = function pad(num) {\n  return ('0' + num).slice(-2);\n};\nvar AudioRecorderPlayer = _createClass(function AudioRecorderPlayer() {\n  var _this = this;\n  _classCallCheck(this, AudioRecorderPlayer);\n  this.mmss = function (secs) {\n    var minutes = Math.floor(secs / 60);\n    secs = secs % 60;\n    minutes = minutes % 60;\n    return pad(minutes) + ':' + pad(secs);\n  };\n  this.mmssss = function (milisecs) {\n    var secs = Math.floor(milisecs / 1000);\n    var minutes = Math.floor(secs / 60);\n    var seconds = secs % 60;\n    var miliseconds = Math.floor(milisecs % 1000 / 10);\n    return pad(minutes) + ':' + pad(seconds) + ':' + pad(miliseconds);\n  };\n  this.addRecordBackListener = function (callback) {\n    if (Platform.OS === 'android') {\n      _this._recorderSubscription = DeviceEventEmitter.addListener('rn-recordback', callback);\n    } else {\n      var myModuleEvt = new NativeEventEmitter(RNAudioRecorderPlayer);\n      _this._recorderSubscription = myModuleEvt.addListener('rn-recordback', callback);\n    }\n  };\n  this.removeRecordBackListener = function () {\n    if (_this._recorderSubscription) {\n      _this._recorderSubscription.remove();\n      _this._recorderSubscription = null;\n    }\n  };\n  this.addPlayBackListener = function (callback) {\n    _this._playerCallback = callback;\n  };\n  this.removePlayBackListener = function () {\n    _this._playerCallback = null;\n  };\n  this.startRecorder = function () {\n    var _ref = _asyncToGenerator(function* (uri, audioSets, meteringEnabled) {\n      if (!_this._isRecording) {\n        _this._isRecording = true;\n        return RNAudioRecorderPlayer.startRecorder(uri != null ? uri : 'DEFAULT', audioSets, meteringEnabled != null ? meteringEnabled : false);\n      }\n      return 'Already recording';\n    });\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  this.pauseRecorder = _asyncToGenerator(function* () {\n    if (!_this._hasPausedRecord) {\n      _this._hasPausedRecord = true;\n      return RNAudioRecorderPlayer.pauseRecorder();\n    }\n    return 'Already paused recording.';\n  });\n  this.resumeRecorder = _asyncToGenerator(function* () {\n    if (_this._hasPausedRecord) {\n      _this._hasPausedRecord = false;\n      return RNAudioRecorderPlayer.resumeRecorder();\n    }\n    return 'Currently recording.';\n  });\n  this.stopRecorder = _asyncToGenerator(function* () {\n    if (_this._isRecording) {\n      _this._isRecording = false;\n      _this._hasPausedRecord = false;\n      return RNAudioRecorderPlayer.stopRecorder();\n    }\n    return 'Already stopped';\n  });\n  this.resumePlayer = _asyncToGenerator(function* () {\n    if (!_this._isPlaying) {\n      return 'No audio playing';\n    }\n    if (_this._hasPaused) {\n      _this._hasPaused = false;\n      return RNAudioRecorderPlayer.resumePlayer();\n    }\n    return 'Already playing';\n  });\n  this.playerCallback = function (event) {\n    if (_this._playerCallback) {\n      _this._playerCallback(event);\n    }\n    if (event.currentPosition === event.duration) {\n      _this.stopPlayer();\n    }\n  };\n  this.startPlayer = function () {\n    var _ref6 = _asyncToGenerator(function* (uri, httpHeaders) {\n      if (!uri) {\n        uri = 'DEFAULT';\n      }\n      if (!_this._playerSubscription) {\n        if (Platform.OS === 'android') {\n          _this._playerSubscription = DeviceEventEmitter.addListener('rn-playback', _this.playerCallback);\n        } else {\n          var myModuleEvt = new NativeEventEmitter(RNAudioRecorderPlayer);\n          _this._playerSubscription = myModuleEvt.addListener('rn-playback', _this.playerCallback);\n        }\n      }\n      if (!_this._isPlaying || _this._hasPaused) {\n        _this._isPlaying = true;\n        _this._hasPaused = false;\n        return RNAudioRecorderPlayer.startPlayer(uri, httpHeaders);\n      }\n    });\n    return function (_x4, _x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  this.stopPlayer = _asyncToGenerator(function* () {\n    if (_this._isPlaying) {\n      _this._isPlaying = false;\n      _this._hasPaused = false;\n      return RNAudioRecorderPlayer.stopPlayer();\n    }\n    return 'Already stopped playing';\n  });\n  this.pausePlayer = _asyncToGenerator(function* () {\n    if (!_this._isPlaying) {\n      return 'No audio playing';\n    }\n    if (!_this._hasPaused) {\n      _this._hasPaused = true;\n      return RNAudioRecorderPlayer.pausePlayer();\n    }\n  });\n  this.seekToPlayer = function () {\n    var _ref9 = _asyncToGenerator(function* (time) {\n      return RNAudioRecorderPlayer.seekToPlayer(time);\n    });\n    return function (_x6) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  this.setVolume = function () {\n    var _ref10 = _asyncToGenerator(function* (volume) {\n      if (volume < 0 || volume > 1) {\n        throw new Error('Value of volume should be between 0.0 to 1.0');\n      }\n      return RNAudioRecorderPlayer.setVolume(volume);\n    });\n    return function (_x7) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  this.setSubscriptionDuration = function () {\n    var _ref11 = _asyncToGenerator(function* (sec) {\n      return RNAudioRecorderPlayer.setSubscriptionDuration(sec);\n    });\n    return function (_x8) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n});\nexport default AudioRecorderPlayer;","map":{"version":3,"names":["RNAudioRecorderPlayer","NativeModules","AudioSourceAndroidType","OutputFormatAndroidType","AudioEncoderAndroidType","AVEncodingOption","AVModeIOSOption","AVEncoderAudioQualityIOSType","AVLinearPCMBitDepthKeyIOSType","pad","num","slice","AudioRecorderPlayer","_createClass","_this","_classCallCheck","mmss","secs","minutes","Math","floor","mmssss","milisecs","seconds","miliseconds","addRecordBackListener","callback","Platform","OS","_recorderSubscription","DeviceEventEmitter","addListener","myModuleEvt","NativeEventEmitter","removeRecordBackListener","remove","addPlayBackListener","_playerCallback","removePlayBackListener","startRecorder","_ref","_asyncToGenerator","uri","audioSets","meteringEnabled","_isRecording","_x","_x2","_x3","apply","arguments","pauseRecorder","_hasPausedRecord","resumeRecorder","stopRecorder","resumePlayer","_isPlaying","_hasPaused","playerCallback","event","currentPosition","duration","stopPlayer","startPlayer","_ref6","httpHeaders","_playerSubscription","_x4","_x5","pausePlayer","seekToPlayer","_ref9","time","_x6","setVolume","_ref10","volume","Error","_x7","setSubscriptionDuration","_ref11","sec","_x8"],"sources":["C:/Users/h0533/Desktop/project3/autisem-translator/client/node_modules/react-native-audio-recorder-player/index.ts"],"sourcesContent":["import type {EmitterSubscription} from 'react-native';\nimport {\n  DeviceEventEmitter,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n} from 'react-native';\n\nconst {RNAudioRecorderPlayer} = NativeModules;\n\nexport enum AudioSourceAndroidType {\n  DEFAULT = 0,\n  MIC,\n  VOICE_UPLINK,\n  VOICE_DOWNLINK,\n  VOICE_CALL,\n  CAMCORDER,\n  VOICE_RECOGNITION,\n  VOICE_COMMUNICATION,\n  REMOTE_SUBMIX,\n  UNPROCESSED,\n  RADIO_TUNER = 1998,\n  HOTWORD,\n}\n\nexport enum OutputFormatAndroidType {\n  DEFAULT = 0,\n  THREE_GPP,\n  MPEG_4,\n  AMR_NB,\n  AMR_WB,\n  AAC_ADIF,\n  AAC_ADTS,\n  OUTPUT_FORMAT_RTP_AVP,\n  MPEG_2_TS,\n  WEBM,\n}\n\nexport enum AudioEncoderAndroidType {\n  DEFAULT = 0,\n  AMR_NB,\n  AMR_WB,\n  AAC,\n  HE_AAC,\n  AAC_ELD,\n  VORBIS,\n}\n\nexport enum AVEncodingOption {\n  lpcm = 'lpcm',\n  ima4 = 'ima4',\n  aac = 'aac',\n  MAC3 = 'MAC3',\n  MAC6 = 'MAC6',\n  ulaw = 'ulaw',\n  alaw = 'alaw',\n  mp1 = 'mp1',\n  mp2 = 'mp2',\n  mp4 = 'mp4',\n  alac = 'alac',\n  amr = 'amr',\n  flac = 'flac',\n  opus = 'opus',\n  wav = 'wav',\n}\n\ntype AVEncodingType =\n  | AVEncodingOption.lpcm\n  | AVEncodingOption.ima4\n  | AVEncodingOption.aac\n  | AVEncodingOption.MAC3\n  | AVEncodingOption.MAC6\n  | AVEncodingOption.ulaw\n  | AVEncodingOption.alaw\n  | AVEncodingOption.mp1\n  | AVEncodingOption.mp2\n  | AVEncodingOption.mp4\n  | AVEncodingOption.alac\n  | AVEncodingOption.amr\n  | AVEncodingOption.flac\n  | AVEncodingOption.opus\n  | AVEncodingOption.wav;\n\nexport enum AVModeIOSOption {\n  gamechat = 'gamechat',\n  measurement = 'measurement',\n  movieplayback = 'movieplayback',\n  spokenaudio = 'spokenaudio',\n  videochat = 'videochat',\n  videorecording = 'videorecording',\n  voicechat = 'voicechat',\n  voiceprompt = 'voiceprompt',\n}\n\nexport type AVModeIOSType =\n  | AVModeIOSOption.gamechat\n  | AVModeIOSOption.measurement\n  | AVModeIOSOption.movieplayback\n  | AVModeIOSOption.spokenaudio\n  | AVModeIOSOption.videochat\n  | AVModeIOSOption.videorecording\n  | AVModeIOSOption.voicechat\n  | AVModeIOSOption.voiceprompt;\n\nexport enum AVEncoderAudioQualityIOSType {\n  min = 0,\n  low = 32,\n  medium = 64,\n  high = 96,\n  max = 127,\n}\n\nexport enum AVLinearPCMBitDepthKeyIOSType {\n  'bit8' = 8,\n  'bit16' = 16,\n  'bit24' = 24,\n  'bit32' = 32,\n}\n\nexport interface AudioSet {\n  AVSampleRateKeyIOS?: number;\n  AVFormatIDKeyIOS?: AVEncodingType;\n  AVModeIOS?: AVModeIOSType;\n  AVNumberOfChannelsKeyIOS?: number;\n  AVEncoderAudioQualityKeyIOS?: AVEncoderAudioQualityIOSType;\n  AudioSourceAndroid?: AudioSourceAndroidType;\n  AVLinearPCMBitDepthKeyIOS?: AVLinearPCMBitDepthKeyIOSType;\n  AVLinearPCMIsBigEndianKeyIOS?: boolean;\n  AVLinearPCMIsFloatKeyIOS?: boolean;\n  AVLinearPCMIsNonInterleavedIOS?: boolean;\n  AVEncoderBitRateKeyIOS?: number;\n  OutputFormatAndroid?: OutputFormatAndroidType;\n  AudioEncoderAndroid?: AudioEncoderAndroidType;\n  AudioEncodingBitRateAndroid?: number;\n  AudioSamplingRateAndroid?: number;\n  AudioChannelsAndroid?: number;\n}\n\nconst pad = (num: number): string => {\n  return ('0' + num).slice(-2);\n};\n\nexport type RecordBackType = {\n  isRecording?: boolean;\n  currentPosition: number;\n  currentMetering?: number;\n};\n\nexport type PlayBackType = {\n  isMuted?: boolean;\n  currentPosition: number;\n  duration: number;\n};\n\nclass AudioRecorderPlayer {\n  private _isRecording: boolean;\n  private _isPlaying: boolean;\n  private _hasPaused: boolean;\n  private _hasPausedRecord: boolean;\n  private _recorderSubscription: EmitterSubscription;\n  private _playerSubscription: EmitterSubscription;\n  private _playerCallback: (event: PlayBackType) => void;\n\n  mmss = (secs: number): string => {\n    let minutes = Math.floor(secs / 60);\n\n    secs = secs % 60;\n    minutes = minutes % 60;\n\n    return pad(minutes) + ':' + pad(secs);\n  };\n\n  mmssss = (milisecs: number): string => {\n    const secs = Math.floor(milisecs / 1000);\n    const minutes = Math.floor(secs / 60);\n    const seconds = secs % 60;\n    const miliseconds = Math.floor((milisecs % 1000) / 10);\n\n    return pad(minutes) + ':' + pad(seconds) + ':' + pad(miliseconds);\n  };\n\n  /**\n   * Set listerner from native module for recorder.\n   * @returns {callBack((e: RecordBackType): void)}\n   */\n\n  addRecordBackListener = (\n    callback: (recordingMeta: RecordBackType) => void,\n  ): void => {\n    if (Platform.OS === 'android') {\n      this._recorderSubscription = DeviceEventEmitter.addListener(\n        'rn-recordback',\n        callback,\n      );\n    } else {\n      const myModuleEvt = new NativeEventEmitter(RNAudioRecorderPlayer);\n\n      this._recorderSubscription = myModuleEvt.addListener(\n        'rn-recordback',\n        callback,\n      );\n    }\n  };\n\n  /**\n   * Remove listener for recorder.\n   * @returns {void}\n   */\n  removeRecordBackListener = (): void => {\n    if (this._recorderSubscription) {\n      this._recorderSubscription.remove();\n      this._recorderSubscription = null;\n    }\n  };\n\n  /**\n   * Set listener from native module for player.\n   * @returns {callBack((e: PlayBackType): void)}\n   */\n  addPlayBackListener = (\n    callback: (playbackMeta: PlayBackType) => void,\n  ): void => {\n    this._playerCallback = callback;\n  };\n\n  /**\n   * remove listener for player.\n   * @returns {void}\n   */\n  removePlayBackListener = (): void => {\n    this._playerCallback = null;\n  };\n\n  /**\n   * start recording with param.\n   * @param {string} uri audio uri.\n   * @returns {Promise<string>}\n   */\n  startRecorder = async (\n    uri?: string,\n    audioSets?: AudioSet,\n    meteringEnabled?: boolean,\n  ): Promise<string> => {\n    if (!this._isRecording) {\n      this._isRecording = true;\n\n      return RNAudioRecorderPlayer.startRecorder(\n        uri ?? 'DEFAULT',\n        audioSets,\n        meteringEnabled ?? false,\n      );\n    }\n\n    return 'Already recording';\n  };\n\n  /**\n   * Pause recording.\n   * @returns {Promise<string>}\n   */\n  pauseRecorder = async (): Promise<string> => {\n    if (!this._hasPausedRecord) {\n      this._hasPausedRecord = true;\n\n      return RNAudioRecorderPlayer.pauseRecorder();\n    }\n\n    return 'Already paused recording.';\n  };\n\n  /**\n   * Resume recording.\n   * @returns {Promise<string>}\n   */\n  resumeRecorder = async (): Promise<string> => {\n    if (this._hasPausedRecord) {\n      this._hasPausedRecord = false;\n\n      return RNAudioRecorderPlayer.resumeRecorder();\n    }\n\n    return 'Currently recording.';\n  };\n\n  /**\n   * stop recording.\n   * @returns {Promise<string>}\n   */\n  stopRecorder = async (): Promise<string> => {\n    if (this._isRecording) {\n      this._isRecording = false;\n      this._hasPausedRecord = false;\n\n      return RNAudioRecorderPlayer.stopRecorder();\n    }\n\n    return 'Already stopped';\n  };\n\n  /**\n   * Resume playing.\n   * @returns {Promise<string>}\n   */\n  resumePlayer = async (): Promise<string> => {\n    if (!this._isPlaying) {\n      return 'No audio playing';\n    }\n\n    if (this._hasPaused) {\n      this._hasPaused = false;\n\n      return RNAudioRecorderPlayer.resumePlayer();\n    }\n\n    return 'Already playing';\n  };\n\n  playerCallback = (event: PlayBackType): void => {\n    if (this._playerCallback) {\n      this._playerCallback(event);\n    }\n\n    if (event.currentPosition === event.duration) {\n      this.stopPlayer();\n    }\n  };\n\n  /**\n   * Start playing with param.\n   * @param {string} uri audio uri.\n   * @param {Record<string, string>} httpHeaders Set of http headers.\n   * @returns {Promise<string>}\n   */\n  startPlayer = async (\n    uri?: string,\n    httpHeaders?: Record<string, string>,\n  ): Promise<string> => {\n    if (!uri) {\n      uri = 'DEFAULT';\n    }\n\n    if (!this._playerSubscription) {\n      if (Platform.OS === 'android') {\n        this._playerSubscription = DeviceEventEmitter.addListener(\n          'rn-playback',\n          this.playerCallback,\n        );\n      } else {\n        const myModuleEvt = new NativeEventEmitter(RNAudioRecorderPlayer);\n\n        this._playerSubscription = myModuleEvt.addListener(\n          'rn-playback',\n          this.playerCallback,\n        );\n      }\n    }\n\n    if (!this._isPlaying || this._hasPaused) {\n      this._isPlaying = true;\n      this._hasPaused = false;\n\n      return RNAudioRecorderPlayer.startPlayer(uri, httpHeaders);\n    }\n  };\n\n  /**\n   * Stop playing.\n   * @returns {Promise<string>}\n   */\n  stopPlayer = async (): Promise<string> => {\n    if (this._isPlaying) {\n      this._isPlaying = false;\n      this._hasPaused = false;\n\n      return RNAudioRecorderPlayer.stopPlayer();\n    }\n\n    return 'Already stopped playing';\n  };\n\n  /**\n   * Pause playing.\n   * @returns {Promise<string>}\n   */\n  pausePlayer = async (): Promise<string> => {\n    if (!this._isPlaying) {\n      return 'No audio playing';\n    }\n\n    if (!this._hasPaused) {\n      this._hasPaused = true;\n\n      return RNAudioRecorderPlayer.pausePlayer();\n    }\n  };\n\n  /**\n   * Seek to.\n   * @param {number} time position seek to in millisecond.\n   * @returns {Promise<string>}\n   */\n  seekToPlayer = async (time: number): Promise<string> => {\n    return RNAudioRecorderPlayer.seekToPlayer(time);\n  };\n\n  /**\n   * Set volume.\n   * @param {number} setVolume set volume.\n   * @returns {Promise<string>}\n   */\n  setVolume = async (volume: number): Promise<string> => {\n    if (volume < 0 || volume > 1) {\n      throw new Error('Value of volume should be between 0.0 to 1.0');\n    }\n\n    return RNAudioRecorderPlayer.setVolume(volume);\n  };\n\n  /**\n   * Set subscription duration. Default is 0.5.\n   * @param {number} sec subscription callback duration in seconds.\n   * @returns {Promise<string>}\n   */\n  setSubscriptionDuration = async (sec: number): Promise<string> => {\n    return RNAudioRecorderPlayer.setSubscriptionDuration(sec);\n  };\n}\n\nexport default AudioRecorderPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}