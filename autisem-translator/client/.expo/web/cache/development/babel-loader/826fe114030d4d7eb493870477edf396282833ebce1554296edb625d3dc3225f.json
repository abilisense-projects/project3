{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useForm, Controller } from 'react-hook-form';\nimport PickerField from \"../register/pickerField\";\nimport RegisterPressable from \"../register/RegisterPressable\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar fields = [{\n  label: 'User Name',\n  state: 'username',\n  placeholder: 'Enter your email'\n}, {\n  label: 'First Name',\n  state: 'firstName',\n  placeholder: 'Enter your firstName'\n}, {\n  label: 'Last Name',\n  state: 'lastName',\n  placeholder: 'Enter your lastName'\n}, {\n  label: 'Phone Number',\n  state: 'phoneNumber',\n  placeholder: 'Enter your phoneNumber'\n}, {\n  label: 'Password',\n  state: 'password',\n  placeholder: 'Enter your password',\n  secureTextEntry: true\n}];\nvar userTypeOptions = [{\n  label: 'Select User Type',\n  value: ''\n}, {\n  label: 'Therapist',\n  value: 'therapist'\n}, {\n  label: 'Treated',\n  value: 'treated'\n}];\nvar RegistrationF = function RegistrationF(_ref) {\n  var fields = _ref.fields,\n    userTypeOptions = _ref.userTypeOptions;\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    setValue = _useForm.setValue,\n    errors = _useForm.errors;\n  var handleRegister = function handleRegister(data) {\n    console.log('Registering user:', data);\n  };\n  return _jsxs(View, {\n    children: [fields.map(function (field) {\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          children: field.label\n        }), _jsx(Controller, {\n          control: control,\n          render: function render(_ref2) {\n            var onChange = _ref2.onChange,\n              onBlur = _ref2.onBlur,\n              value = _ref2.value;\n            return _jsx(TextInput, {\n              onBlur: onBlur,\n              onChangeText: function onChangeText(text) {\n                return onChange(text);\n              },\n              value: value,\n              placeholder: field.placeholder,\n              secureTextEntry: field.secureTextEntry\n            });\n          },\n          name: field.state,\n          rules: {\n            required: `Please enter your ${field.label.toLowerCase()}`\n          },\n          defaultValue: \"\"\n        }), errors[field.state] && _jsx(Text, {\n          children: errors[field.state].message\n        })]\n      }, field.label);\n    }), _jsx(Text, {\n      children: \"User Type\"\n    }), _jsx(Controller, {\n      control: control,\n      render: function render(_ref3) {\n        var onChange = _ref3.onChange,\n          value = _ref3.value;\n        return _jsx(PickerField, {\n          selectedValue: value,\n          onValueChange: function onValueChange(itemValue) {\n            return onChange(itemValue);\n          },\n          items: userTypeOptions\n        });\n      },\n      name: \"userType\",\n      rules: {\n        required: 'Please select user type'\n      },\n      defaultValue: \"\"\n    }), errors.userType && _jsx(Text, {\n      children: errors.userType.message\n    }), _jsx(RegisterPressable, {\n      onPress: handleSubmit(handleRegister),\n      title: \"Register\"\n    })]\n  });\n};\nexport default RegistrationF;","map":{"version":3,"names":["React","View","Text","TextInput","Button","useForm","Controller","PickerField","RegisterPressable","jsx","_jsx","jsxs","_jsxs","fields","label","state","placeholder","secureTextEntry","userTypeOptions","value","RegistrationF","_ref","_useForm","control","handleSubmit","setValue","errors","handleRegister","data","console","log","children","map","field","render","_ref2","onChange","onBlur","onChangeText","text","name","rules","required","toLowerCase","defaultValue","message","_ref3","selectedValue","onValueChange","itemValue","items","userType","onPress","title"],"sources":["C:/Users/malky/Desktop/project3/autisem-translator/client/components/register/f.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text, TextInput, Button } from 'react-native';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport PickerField from '../register/pickerField';\r\nimport RegisterPressable from '../register/RegisterPressable';\r\n\r\nconst fields = [\r\n    { label: 'User Name', state: 'username', placeholder: 'Enter your email' },\r\n    { label: 'First Name', state: 'firstName', placeholder: 'Enter your firstName' },\r\n    { label: 'Last Name', state: 'lastName', placeholder: 'Enter your lastName' },\r\n    { label: 'Phone Number', state: 'phoneNumber', placeholder: 'Enter your phoneNumber' },\r\n    { label: 'Password', state: 'password', placeholder: 'Enter your password', secureTextEntry: true },\r\n  ];\r\n  \r\n  const userTypeOptions = [\r\n    { label: 'Select User Type', value: '' },\r\n    { label: 'Therapist', value: 'therapist' },\r\n    { label: 'Treated', value: 'treated' },\r\n  ];\r\n\r\nconst RegistrationF = ({ fields, userTypeOptions }) => {\r\n  const { control, handleSubmit, setValue, errors } = useForm();\r\n\r\n  const handleRegister = (data) => {\r\n    // Implement registration logic here\r\n    // Check validations / warn user\r\n    // Save data / send to server\r\n    console.log('Registering user:', data);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {fields.map((field) => (\r\n        <View key={field.label}>\r\n          <Text>{field.label}</Text>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, onBlur, value }) => (\r\n              <TextInput\r\n                onBlur={onBlur}\r\n                onChangeText={(text) => onChange(text)}\r\n                value={value}\r\n                placeholder={field.placeholder}\r\n                secureTextEntry={field.secureTextEntry}\r\n              />\r\n            )}\r\n            name={field.state}\r\n            rules={{ required: `Please enter your ${field.label.toLowerCase()}` }}\r\n            defaultValue=\"\"\r\n          />\r\n          {errors[field.state] && <Text>{errors[field.state].message}</Text>}\r\n        </View>\r\n      ))}\r\n      <Text>User Type</Text>\r\n      <Controller\r\n        control={control}\r\n        render={({ onChange, value }) => (\r\n          <PickerField\r\n            selectedValue={value}\r\n            onValueChange={(itemValue) => onChange(itemValue)}\r\n            items={userTypeOptions}\r\n          />\r\n        )}\r\n        name=\"userType\"\r\n        rules={{ required: 'Please select user type' }}\r\n        defaultValue=\"\"\r\n      />\r\n      {errors.userType && <Text>{errors.userType.message}</Text>}\r\n      <RegisterPressable onPress={handleSubmit(handleRegister)} title=\"Register\" />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default RegistrationF;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}