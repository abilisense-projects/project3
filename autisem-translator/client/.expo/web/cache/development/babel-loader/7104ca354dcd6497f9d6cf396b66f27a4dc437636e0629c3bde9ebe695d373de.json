{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport { useForm, Controller } from 'react-hook-form';\nimport PickerField from \"./pickerField\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GenericForm = function GenericForm(_ref) {\n  var fields = _ref.fields,\n    onSubmit = _ref.onSubmit;\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    setValue = _useForm.setValue,\n    errors = _useForm.formState.errors;\n  var handleInputChange = function handleInputChange(field, text) {\n    setValue(field, text);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [fields.map(function (field) {\n      return _jsxs(View, {\n        children: [field.type === 'text' && _jsx(Controller, {\n          control: control,\n          render: function render(_ref2) {\n            var value = _ref2.field.value;\n            return _jsx(TextInput, {\n              style: styles.input,\n              placeholder: field.placeholder,\n              value: value,\n              onChangeText: function onChangeText(text) {\n                return handleInputChange(field.name, text);\n              },\n              secureTextEntry: field.secureTextEntry\n            });\n          },\n          name: field.name,\n          rules: field.rules,\n          defaultValue: \"\"\n        }), field.type === 'picker' && field.options != null && _jsx(Controller, {\n          control: control,\n          render: function render(_ref3) {\n            var value = _ref3.field.value;\n            return _jsx(PickerField, {\n              selectedValue: value\n            });\n          },\n          name: field.name,\n          rules: field.rules,\n          defaultValue: \"\"\n        }), errors[field.name] && _jsx(Text, {\n          style: styles.error,\n          children: errors[field.name].message\n        })]\n      }, field.name);\n    }), _jsx(Pressable, {\n      style: [styles.button, {\n        opacity: Object.keys(errors).length === 0 ? 1 : 0.5\n      }],\n      disabled: Object.keys(errors).length > 0,\n      onPress: handleSubmit(onSubmit),\n      title: \"Submit/Register\",\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"I'm pressable!\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center'\n  },\n  input: {\n    height: 60,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    marginBottom: 12,\n    paddingHorizontal: 10,\n    borderRadius: 8,\n    fontSize: 16\n  },\n  button: {\n    backgroundColor: 'green',\n    borderRadius: 8,\n    paddingVertical: 10,\n    alignItems: 'center',\n    marginTop: 16,\n    marginBottom: 12\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16\n  },\n  error: {\n    color: 'red',\n    fontSize: 20,\n    marginBottom: 12\n  }\n});\nexport default GenericForm;","map":{"version":3,"names":["React","View","TextInput","Text","StyleSheet","Pressable","Picker","useForm","Controller","PickerField","jsx","_jsx","jsxs","_jsxs","GenericForm","_ref","fields","onSubmit","_useForm","control","handleSubmit","setValue","errors","formState","handleInputChange","field","text","style","styles","container","children","map","type","render","_ref2","value","input","placeholder","onChangeText","name","secureTextEntry","rules","defaultValue","options","_ref3","selectedValue","error","message","button","opacity","Object","keys","length","disabled","onPress","title","buttonText","create","flex","padding","justifyContent","height","borderColor","borderWidth","marginBottom","paddingHorizontal","borderRadius","fontSize","backgroundColor","paddingVertical","alignItems","marginTop","color","fontWeight"],"sources":["C:/Users/malky/Desktop/project3/autisem-translator/client/components/register/f.js"],"sourcesContent":["import React from 'react';\r\nimport { View, TextInput, Text, StyleSheet, Pressable,Picker  } from 'react-native';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport PickerField from './pickerField';\r\n\r\nconst GenericForm = ({ fields, onSubmit }) => {\r\n    const { control, handleSubmit, setValue, formState: { errors } } = useForm();\r\n\r\n    const handleInputChange = (field, text) => {\r\n        setValue(field, text);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {fields.map((field) => (\r\n                <View key={field.name}>\r\n                    {field.type === 'text' && (\r\n                        <Controller\r\n                            control={control}\r\n                            render={({ field: { value } }) => (\r\n                                <TextInput\r\n                                    style={styles.input}\r\n                                    placeholder={field.placeholder}\r\n                                    value={value}\r\n                                    onChangeText={(text) => handleInputChange(field.name, text)}\r\n                                    secureTextEntry={field.secureTextEntry}\r\n                                />\r\n                            )}\r\n                            name={field.name}\r\n                            rules={field.rules}\r\n                            defaultValue=\"\"\r\n                        />\r\n                    )}\r\n                    {field.type === 'picker' && field.options!=null && (\r\n                        <Controller\r\n                            control={control}\r\n                            render={({ field: { value } }) => (\r\n                                // <Picker\r\n                                //     selectedValue={value}\r\n                                //     onValueChange={(itemValue) => setValue(field.name, itemValue)}\r\n                                // >\r\n                                //     {field.options.map((option) => (\r\n                                //         <Picker.Item key={option.value} label={option.name} value={option.value} />\r\n                                //     ))}\r\n                                // </Picker>\r\n                                <PickerField selectedValue={value} ></PickerField>\r\n                            )}\r\n                            name={field.name}\r\n                            rules={field.rules}\r\n                            defaultValue=\"\"\r\n                        />\r\n                    )}\r\n                    {errors[field.name] && <Text style={styles.error}>{errors[field.name].message}</Text>}\r\n                </View>\r\n            ))}\r\n            {/* i do want the buttons to be generic */}\r\n            <Pressable style={[styles.button, { opacity: Object.keys(errors).length === 0 ? 1 : 0.5 }]}\r\n                disabled={Object.keys(errors).length > 0}\r\n                onPress={handleSubmit(onSubmit)}\r\n                title=\"Submit/Register\" >\r\n                <Text style={styles.buttonText}>I'm pressable!</Text>\r\n            </Pressable>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 16,\r\n        justifyContent: 'center',\r\n    },\r\n    input: {\r\n        height: 60,\r\n        borderColor: '#ccc',\r\n        borderWidth: 1,\r\n        marginBottom: 12,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 8,\r\n        fontSize: 16,\r\n    },\r\n    button: {\r\n        backgroundColor: 'green',\r\n        borderRadius: 8,\r\n        paddingVertical: 10,\r\n        alignItems: 'center',\r\n        marginTop: 16,\r\n        marginBottom: 12,\r\n    },\r\n    buttonText: {\r\n        color: '#fff',\r\n        fontWeight: 'bold',\r\n        fontSize: 16,\r\n    },\r\n    error: {\r\n        color: 'red',\r\n        fontSize: 20,\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\nexport default GenericForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}