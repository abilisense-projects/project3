{"ast":null,"code":"import React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport GenericForm from \"../shared/form\";\nimport validations from \"../shared/validations\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar fields = [{\n  name: 'Password',\n  state: 'password',\n  placeholder: 'Enter new Password',\n  type: 'text',\n  secureTextEntry: true,\n  rules: validations.password\n}, {\n  name: 'RepeatPassword',\n  state: 'repeatPassword',\n  placeholder: 'Enter repeat Password',\n  type: 'text',\n  secureTextEntry: true,\n  rules: validations.repeatPassword\n}];\nexport default function NewPassword() {\n  var onSubmit = function onSubmit(formData) {\n    if (formData.Password === formData.RepeatPassword) {\n      console.log('New Password:', formData.Password);\n      console.log('Repeat Password:', formData.RepeatPassword);\n    } else {\n      console.log('Passwords do not match!');\n    }\n  };\n  return _jsx(View, {\n    children: _jsx(GenericForm, {\n      fields: fields,\n      onSubmit: onSubmit,\n      submitButton: \"Save\"\n    })\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","TextInput","Pressable","GenericForm","validations","jsx","_jsx","fields","name","state","placeholder","type","secureTextEntry","rules","password","repeatPassword","NewPassword","onSubmit","formData","Password","RepeatPassword","console","log","children","submitButton"],"sources":["C:/abilisense/project3/autisem-translator/client/components/login/newPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, TextInput, Pressable } from \"react-native\";\r\nimport GenericForm from '../shared/form';\r\nimport validations from '../shared/validations';\r\n\r\n\r\nconst fields = [\r\n  { name: 'Password', state: 'password', placeholder: 'Enter new Password',type: 'text', secureTextEntry: true ,rules: validations.password },\r\n  {\r\n    name: 'RepeatPassword',\r\n    state: 'repeatPassword',\r\n    placeholder: 'Enter repeat Password',\r\n    type: 'text',\r\n    secureTextEntry: true,\r\n    rules: validations.repeatPassword,\r\n  },\r\n\r\n\r\n];\r\n\r\n\r\n\r\nexport default function NewPassword() {\r\n  // const [newPassword, setNewPassword] = useState(\"\");\r\n  // const [repeatPassword, setrepeatPassword] = useState(\"\");\r\n  // const [passwordsMatch, setPasswordsMatch] = useState(true);\r\n\r\n  // const handleNewPassword = () => {\r\n  //   // Add your login logic here\r\n  //   // Check if passwords match\r\n  //   if (newPassword === repeatPassword) {\r\n  //     // Passwords match, continue with your logic\r\n  //     console.log(\"New Password:\", newPassword);\r\n  //     console.log(\"Repeat Password:\", repeatPassword);\r\n  //     setPasswordsMatch(true);\r\n  //   } else {\r\n  //     // Passwords do not match, show an error message\r\n  //     console.log(\"Passwords do not match!\");\r\n  //     setPasswordsMatch(false);\r\n  //   }\r\n  // };\r\n\r\n  // const onSubmit = (data) => {\r\n  //   //clear form?\r\n  //   //Handle form submission logic\r\n  //   //save the data in db\r\n  //   //did all data go through validations / wran user\r\n  //   //save data / send to server\r\n  //   console.log('Form data:', data);\r\n    \r\n      // Add your login logic here\r\n      // Check if passwords match\r\n      // if (newPassword === repeatPassword) {\r\n      //   // Passwords match, continue with your logic\r\n      //   console.log(\"New Password:\", newPassword);\r\n      //   console.log(\"Repeat Password:\", repeatPassword);\r\n      //   setPasswordsMatch(true);\r\n      // } else {\r\n      //   // Passwords do not match, show an error message\r\n      //   console.log(\"Passwords do not match!\");\r\n      //   setPasswordsMatch(false);\r\n      // }\r\n   \r\n  // };\r\n  const onSubmit = (formData) => {\r\n    // Add your form submission logic here\r\n    // `formData` contains the values of all form fields\r\n  \r\n    // Check if passwords match\r\n    if (formData.Password === formData.RepeatPassword) {\r\n      // Passwords match, continue with your logic\r\n      console.log('New Password:', formData.Password);\r\n      console.log('Repeat Password:', formData.RepeatPassword);\r\n      // Add any additional logic here\r\n  \r\n      // Assuming you have a function to handle the submission, call it here\r\n      // handleSubmission(formData);\r\n    } else {\r\n      // Passwords do not match, show an error message\r\n      \r\n      console.log('Passwords do not match!');\r\n      // Handle the error as needed\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <View>\r\n      {/* <Text>New Password</Text>\r\n      <TextInput\r\n        value={newPassword}\r\n        onChangeText={setNewPassword}\r\n        secureTextEntry\r\n      />\r\n\r\n      <Text>Repeat password</Text>\r\n      <TextInput\r\n        value={repeatPassword}\r\n        onChangeText={setrepeatPassword}\r\n        secureTextEntry\r\n      /> */}\r\n      {/* {!passwordsMatch && (\r\n        <Text style={{ color: \"red\" }}>Passwords do not match!</Text>\r\n      )} */}\r\n\r\n      {/* <Pressable\r\n        onPress={handleNewPassword}\r\n        style={{ backgroundColor: \"#0f968c\", padding: 10, borderRadius: 5 }}\r\n      >\r\n        <Text style={{ color: \"white\", textAlign: \"center\" }}>Save </Text>\r\n      </Pressable> */}\r\n\r\n      <GenericForm fields={fields} onSubmit={onSubmit} submitButton=\"Save\"></GenericForm>\r\n\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,SAAA;AAExC,OAAOC,WAAW;AAClB,OAAOC,WAAW;AAA8B,SAAAC,GAAA,IAAAC,IAAA;AAGhD,IAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE,UAAU;EAAEC,WAAW,EAAE,oBAAoB;EAACC,IAAI,EAAE,MAAM;EAAEC,eAAe,EAAE,IAAI;EAAEC,KAAK,EAAET,WAAW,CAACU;AAAS,CAAC,EAC3I;EACEN,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,gBAAgB;EACvBC,WAAW,EAAE,uBAAuB;EACpCC,IAAI,EAAE,MAAM;EACZC,eAAe,EAAE,IAAI;EACrBC,KAAK,EAAET,WAAW,CAACW;AACrB,CAAC,CAGF;AAID,eAAe,SAASC,WAAWA,CAAA,EAAG;EA0CpC,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,QAAQ,EAAK;IAK7B,IAAIA,QAAQ,CAACC,QAAQ,KAAKD,QAAQ,CAACE,cAAc,EAAE;MAEjDC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,QAAQ,CAACC,QAAQ,CAAC;MAC/CE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,QAAQ,CAACE,cAAc,CAAC;IAK1D,CAAC,MAAM;MAGLC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAExC;EACF,CAAC;EAED,OACEhB,IAAA,CAACP,IAAI;IAAAwB,QAAA,EAyBHjB,IAAA,CAACH,WAAW;MAACI,MAAM,EAAEA,MAAO;MAACU,QAAQ,EAAEA,QAAS;MAACO,YAAY,EAAC;IAAM,CAAc;EAAC,CAE/E,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}