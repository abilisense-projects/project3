{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport GenericForm from \"../shared/form\";\nimport validations from \"../shared/validations\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar fields = [{\n  name: 'Password',\n  state: 'password',\n  placeholder: 'Enter your password',\n  type: 'text',\n  secureTextEntry: true,\n  rules: validations.password\n}, {\n  name: 'Password',\n  state: 'password',\n  placeholder: 'Enter repeat Password',\n  type: 'text',\n  secureTextEntry: true,\n  rules: validations.password\n}];\nexport default function NewPassword() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    newPassword = _useState2[0],\n    setNewPassword = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    repeatPassword = _useState4[0],\n    setrepeatPassword = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    passwordsMatch = _useState6[0],\n    setPasswordsMatch = _useState6[1];\n  var handleNewPassword = function handleNewPassword() {\n    if (newPassword === repeatPassword) {\n      console.log(\"New Password:\", newPassword);\n      console.log(\"Repeat Password:\", repeatPassword);\n      setPasswordsMatch(true);\n    } else {\n      console.log(\"Passwords do not match!\");\n      setPasswordsMatch(false);\n    }\n  };\n  var onSubmit = function onSubmit(data) {\n    console.log('Form data:', data);\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"New Password\"\n    }), _jsx(TextInput, {\n      value: newPassword,\n      onChangeText: setNewPassword,\n      secureTextEntry: true\n    }), _jsx(Text, {\n      children: \"Repeat password\"\n    }), _jsx(TextInput, {\n      value: repeatPassword,\n      onChangeText: setrepeatPassword,\n      secureTextEntry: true\n    }), !passwordsMatch && _jsx(Text, {\n      style: {\n        color: \"red\"\n      },\n      children: \"Passwords do not match!\"\n    }), _jsx(GenericForm, {\n      fields: fields,\n      onSubmit: onSubmit,\n      submitButton: \"Save\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","TextInput","Pressable","GenericForm","validations","jsx","_jsx","jsxs","_jsxs","fields","name","state","placeholder","type","secureTextEntry","rules","password","NewPassword","_useState","_useState2","_slicedToArray","newPassword","setNewPassword","_useState3","_useState4","repeatPassword","setrepeatPassword","_useState5","_useState6","passwordsMatch","setPasswordsMatch","handleNewPassword","console","log","onSubmit","data","children","value","onChangeText","style","color","submitButton"],"sources":["C:/abilisense/project3/autisem-translator/client/components/login/newPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, TextInput, Pressable } from \"react-native\";\r\nimport GenericForm from '../shared/form';\r\nimport validations from '../shared/validations';\r\n\r\n\r\nconst fields = [\r\n  { name: 'Password', state: 'password', placeholder: 'Enter your password',type: 'text', secureTextEntry: true ,rules: validations.password },\r\n  { name: 'Password', state: 'password', placeholder: 'Enter repeat Password',type: 'text', secureTextEntry: true ,rules: validations.password },\r\n];\r\n\r\n\r\n\r\nexport default function NewPassword() {\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [repeatPassword, setrepeatPassword] = useState(\"\");\r\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\r\n\r\n  const handleNewPassword = () => {\r\n    // Add your login logic here\r\n    // Check if passwords match\r\n    if (newPassword === repeatPassword) {\r\n      // Passwords match, continue with your logic\r\n      console.log(\"New Password:\", newPassword);\r\n      console.log(\"Repeat Password:\", repeatPassword);\r\n      setPasswordsMatch(true);\r\n    } else {\r\n      // Passwords do not match, show an error message\r\n      console.log(\"Passwords do not match!\");\r\n      setPasswordsMatch(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    //clear form?\r\n    //Handle form submission logic\r\n    //save the data in db\r\n    //did all data go through validations / wran user\r\n    //save data / send to server\r\n    console.log('Form data:', data);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text>New Password</Text>\r\n      <TextInput\r\n        value={newPassword}\r\n        onChangeText={setNewPassword}\r\n        secureTextEntry\r\n      />\r\n\r\n      <Text>Repeat password</Text>\r\n      <TextInput\r\n        value={repeatPassword}\r\n        onChangeText={setrepeatPassword}\r\n        secureTextEntry\r\n      />\r\n      {!passwordsMatch && (\r\n        <Text style={{ color: \"red\" }}>Passwords do not match!</Text>\r\n      )}\r\n\r\n      {/* <Pressable\r\n        onPress={handleNewPassword}\r\n        style={{ backgroundColor: \"#0f968c\", padding: 10, borderRadius: 5 }}\r\n      >\r\n        <Text style={{ color: \"white\", textAlign: \"center\" }}>Save </Text>\r\n      </Pressable> */}\r\n\r\n      <GenericForm fields={fields} onSubmit={onSubmit} submitButton=\"Save\"></GenericForm>\r\n\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,SAAA;AAExC,OAAOC,WAAW;AAClB,OAAOC,WAAW;AAA8B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGhD,IAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE,UAAU;EAAEC,WAAW,EAAE,qBAAqB;EAACC,IAAI,EAAE,MAAM;EAAEC,eAAe,EAAE,IAAI;EAAEC,KAAK,EAAEX,WAAW,CAACY;AAAS,CAAC,EAC5I;EAAEN,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE,UAAU;EAAEC,WAAW,EAAE,uBAAuB;EAACC,IAAI,EAAE,MAAM;EAAEC,eAAe,EAAE,IAAI;EAAEC,KAAK,EAAEX,WAAW,CAACY;AAAS,CAAC,CAC/I;AAID,eAAe,SAASC,WAAWA,CAAA,EAAG;EACpC,IAAAC,SAAA,GAAsCpB,QAAQ,CAAC,EAAE,CAAC;IAAAqB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAA4CzB,QAAQ,CAAC,EAAE,CAAC;IAAA0B,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAAG,UAAA,GAA4C7B,QAAQ,CAAC,IAAI,CAAC;IAAA8B,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAnDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EAExC,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAG9B,IAAIV,WAAW,KAAKI,cAAc,EAAE;MAElCO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEZ,WAAW,CAAC;MACzCW,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAER,cAAc,CAAC;MAC/CK,iBAAiB,CAAC,IAAI,CAAC;IACzB,CAAC,MAAM;MAELE,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCH,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,IAAMI,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,IAAI,EAAK;IAMzBH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,IAAI,CAAC;EACjC,CAAC;EAED,OACE3B,KAAA,CAACT,IAAI;IAAAqC,QAAA,GACH9B,IAAA,CAACN,IAAI;MAAAoC,QAAA,EAAC;IAAY,CAAM,CAAC,EACzB9B,IAAA,CAACL,SAAS;MACRoC,KAAK,EAAEhB,WAAY;MACnBiB,YAAY,EAAEhB,cAAe;MAC7BR,eAAe;IAAA,CAChB,CAAC,EAEFR,IAAA,CAACN,IAAI;MAAAoC,QAAA,EAAC;IAAe,CAAM,CAAC,EAC5B9B,IAAA,CAACL,SAAS;MACRoC,KAAK,EAAEZ,cAAe;MACtBa,YAAY,EAAEZ,iBAAkB;MAChCZ,eAAe;IAAA,CAChB,CAAC,EACD,CAACe,cAAc,IACdvB,IAAA,CAACN,IAAI;MAACuC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAJ,QAAA,EAAC;IAAuB,CAAM,CAC7D,EASD9B,IAAA,CAACH,WAAW;MAACM,MAAM,EAAEA,MAAO;MAACyB,QAAQ,EAAEA,QAAS;MAACO,YAAY,EAAC;IAAM,CAAc,CAAC;EAAA,CAE/E,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}