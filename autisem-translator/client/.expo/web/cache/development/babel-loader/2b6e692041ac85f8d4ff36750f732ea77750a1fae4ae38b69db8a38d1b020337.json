{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useForm, Controller } from 'react-hook-form';\nimport GenericButton from \"./button\";\nimport TextInputField from \"./textInputField\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GenericForm = function GenericForm(_ref) {\n  var fields = _ref.fields,\n    onSubmit = _ref.onSubmit,\n    submitButton = _ref.submitButton;\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    setValue = _useForm.setValue,\n    errors = _useForm.formState.errors;\n  var handleInputChange = function handleInputChange(field, text) {\n    setValue(field, text);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [fields.map(function (field) {\n      return _jsxs(View, {\n        children: [field.type === 'text' && _jsx(Controller, {\n          control: control,\n          render: function render(_ref2) {\n            var value = _ref2.field.value;\n            return _jsx(TextInputField, {\n              value: value,\n              onChangeText: function onChangeText(text) {\n                return handleInputChange(field.name, text);\n              },\n              placeholder: field.placeholder,\n              secure: field.secureTextEntry\n            });\n          },\n          name: field.name,\n          rules: field.rules,\n          defaultValue: \"\"\n        }), field.type === 'picker' && _jsx(Controller, {\n          control: control,\n          render: function render(_ref3) {\n            var value = _ref3.field.value;\n            return _jsx(Picker, {\n              selectedValue: value,\n              onValueChange: function onValueChange(itemValue) {\n                return setValue(field.name, itemValue);\n              },\n              children: field.options.map(function (option) {\n                return _jsx(Picker.Item, {\n                  label: option.name,\n                  value: option.value\n                }, option.value);\n              })\n            });\n          },\n          name: field.name,\n          rules: field.rules,\n          defaultValue: \"\"\n        }), errors[field.name] && _jsx(Text, {\n          style: styles.error,\n          children: errors[field.name].message\n        })]\n      }, field.name);\n    }), _jsx(GenericButton, {\n      onPress: handleSubmit(onSubmit),\n      title: submitButton\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center'\n  },\n  button: {\n    backgroundColor: 'green',\n    borderRadius: 8,\n    paddingVertical: 10,\n    alignItems: 'center',\n    marginTop: 16,\n    marginBottom: 12\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16\n  },\n  error: {\n    color: 'red',\n    fontSize: 20,\n    marginBottom: 12\n  }\n});\nexport default GenericForm;","map":{"version":3,"names":["React","View","TextInput","Text","StyleSheet","Picker","Pressable","useForm","Controller","GenericButton","TextInputField","jsx","_jsx","jsxs","_jsxs","GenericForm","_ref","fields","onSubmit","submitButton","_useForm","control","handleSubmit","setValue","errors","formState","handleInputChange","field","text","style","styles","container","children","map","type","render","_ref2","value","onChangeText","name","placeholder","secure","secureTextEntry","rules","defaultValue","_ref3","selectedValue","onValueChange","itemValue","options","option","Item","label","error","message","onPress","title","create","flex","padding","justifyContent","button","backgroundColor","borderRadius","paddingVertical","alignItems","marginTop","marginBottom","buttonText","color","fontWeight","fontSize"],"sources":["C:/Users/malky/Desktop/project3/autisem-translator/client/components/shared/form.js"],"sourcesContent":["import React from 'react';\r\nimport { View, TextInput, Text, StyleSheet, Picker, Pressable } from 'react-native';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport GenericButton from './button';\r\nimport TextInputField from './textInputField';\r\n/**\r\n * check if fields & userTypeOptions are not null\r\n */\r\nconst GenericForm = ({ fields, onSubmit, submitButton }) => {\r\n    const { control, handleSubmit, setValue, formState: { errors } } = useForm();\r\n    const handleInputChange = (field, text) => {\r\n        setValue(field, text);\r\n    };\r\n    return (\r\n        <View style={styles.container}>\r\n            {fields.map((field) => (\r\n                <View key={field.name}>\r\n                    {field.type === 'text' && (\r\n                        <Controller\r\n                            control={control}\r\n                            render={({ field: { value } }) => (\r\n                                // <TextInput\r\n                                //     style={styles.input}\r\n                                //     placeholder={field.placeholder}\r\n                                //     value={value}\r\n                                //     onChangeText={(text) => handleInputChange(field.name, text)}\r\n                                //     secureTextEntry={field.secureTextEntry}\r\n                                // />\r\n                              <TextInputField value={value} onChangeText={(text) => handleInputChange(field.name, text)} placeholder={field.placeholder} secure={field.secureTextEntry}></TextInputField>  \r\n                            )}\r\n                            name={field.name}\r\n                            rules={field.rules}\r\n                            defaultValue=\"\"\r\n                        />\r\n                    )}\r\n                    {field.type === 'picker' && (\r\n                        <Controller\r\n                            control={control}\r\n                            render={({ field: { value } }) => (\r\n                                <Picker\r\n                                    selectedValue={value}\r\n                                    onValueChange={(itemValue) => setValue(field.name, itemValue)}\r\n                                >\r\n                                    {field.options.map((option) => (\r\n                                        <Picker.Item key={option.value} label={option.name} value={option.value} />\r\n                                    ))}\r\n                                </Picker>\r\n                            )}\r\n                            name={field.name}\r\n                            rules={field.rules}\r\n                            defaultValue=\"\"\r\n                        />\r\n                    )}\r\n                    {errors[field.name] && <Text style={styles.error}>{errors[field.name].message}</Text>}\r\n                </View>\r\n            ))}\r\n            <GenericButton onPress={handleSubmit(onSubmit)}\r\n                title={submitButton}\r\n                // isDisabled={Object.keys(errors).length > 0}\r\n\r\n                ></GenericButton>\r\n        </View>\r\n    );\r\n};\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 16,\r\n        justifyContent: 'center',\r\n    },\r\n    // input: {\r\n    //     height: 60,\r\n    //     borderColor: '#ccc',\r\n    //     borderWidth: 1,\r\n    //     marginBottom: 12,\r\n    //     paddingHorizontal: 10,\r\n    //     borderRadius: 8,\r\n    //     fontSize: 16,\r\n    // },\r\n    button: {\r\n        backgroundColor: 'green',\r\n        borderRadius: 8,\r\n        paddingVertical: 10,\r\n        alignItems: 'center',\r\n        marginTop: 16,\r\n        marginBottom: 12,\r\n    },\r\n    buttonText: {\r\n        color: '#fff',\r\n        fontWeight: 'bold',\r\n        fontSize: 16,\r\n    },\r\n    error: {\r\n        color: 'red',\r\n        fontSize: 20,\r\n        marginBottom: 12,\r\n    },\r\n});\r\nexport default GenericForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}