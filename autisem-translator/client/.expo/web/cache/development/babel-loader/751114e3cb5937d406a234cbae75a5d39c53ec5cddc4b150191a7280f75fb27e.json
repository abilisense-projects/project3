{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport { useForm, Controller } from 'react-hook-form';\nimport GenericButton from \"./button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GenericForm = function GenericForm(_ref) {\n  var fields = _ref.fields,\n    onSubmit = _ref.onSubmit,\n    submitButton = _ref.submitButton;\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    setValue = _useForm.setValue,\n    errors = _useForm.formState.errors;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFormDirty = _useState2[0],\n    setIsFormDirty = _useState2[1];\n  var handleInputChange = function handleInputChange(field, text) {\n    setValue(field, text);\n    setIsFormDirty(true);\n  };\n  console.log(fields);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [fields.map(function (field) {\n      return _jsxs(View, {\n        children: [field.type === 'text' && _jsx(Controller, {\n          control: control,\n          render: function render(_ref2) {\n            var value = _ref2.field.value;\n            return _jsx(TextInput, {\n              style: styles.input,\n              placeholder: field.placeholder,\n              value: value,\n              onChangeText: function onChangeText(text) {\n                return handleInputChange(field.name, text);\n              },\n              secureTextEntry: field.secureTextEntry\n            });\n          },\n          name: field.name,\n          rules: field.rules,\n          defaultValue: \"\"\n        }), field.type === 'picker' && _jsx(Controller, {\n          control: control,\n          render: function render(_ref3) {\n            var value = _ref3.field.value;\n            return _jsx(Picker, {\n              selectedValue: value,\n              onValueChange: function onValueChange(itemValue) {\n                return setValue(field.name, itemValue);\n              },\n              children: field.options.map(function (option) {\n                return _jsx(Picker.Item, {\n                  label: option.name,\n                  value: option.value\n                }, option.value);\n              })\n            });\n          },\n          name: field.name,\n          rules: field.rules,\n          defaultValue: \"\"\n        }), errors[field.name] && _jsx(Text, {\n          style: styles.error,\n          children: errors[field.name].message\n        })]\n      }, field.name);\n    }), _jsx(GenericButton, {\n      onPress: handleSubmit(onSubmit),\n      title: submitButton,\n      isDisabled: Object.keys(errors).length > 0 || !isFormDirty\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center'\n  },\n  input: {\n    height: 60,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    marginBottom: 12,\n    paddingHorizontal: 10,\n    borderRadius: 8,\n    fontSize: 16\n  },\n  button: {\n    backgroundColor: 'green',\n    borderRadius: 8,\n    paddingVertical: 10,\n    alignItems: 'center',\n    marginTop: 16,\n    marginBottom: 12\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16\n  },\n  error: {\n    color: 'red',\n    fontSize: 20,\n    marginBottom: 12\n  }\n});\nexport default GenericForm;","map":{"version":3,"names":["React","useState","View","TextInput","Text","StyleSheet","Pressable","Picker","useForm","Controller","GenericButton","jsx","_jsx","jsxs","_jsxs","GenericForm","_ref","fields","onSubmit","submitButton","_useForm","control","handleSubmit","setValue","errors","formState","_useState","_useState2","_slicedToArray","isFormDirty","setIsFormDirty","handleInputChange","field","text","console","log","style","styles","container","children","map","type","render","_ref2","value","input","placeholder","onChangeText","name","secureTextEntry","rules","defaultValue","_ref3","selectedValue","onValueChange","itemValue","options","option","Item","label","error","message","onPress","title","isDisabled","Object","keys","length","create","flex","padding","justifyContent","height","borderColor","borderWidth","marginBottom","paddingHorizontal","borderRadius","fontSize","button","backgroundColor","paddingVertical","alignItems","marginTop","buttonText","color","fontWeight"],"sources":["C:/Users/malky/Desktop/project3/autisem-translator/client/components/shared/form.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, Text, StyleSheet, Pressable, Picker } from 'react-native';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport GenericButton from './button';\r\n/**\r\n * check if fields & userTypeOptions are not null\r\n */\r\nconst GenericForm = ({ fields, onSubmit, submitButton }) => {\r\n    const { control, handleSubmit, setValue, formState: { errors } } = useForm();\r\n    const [isFormDirty, setIsFormDirty] = useState(false);\r\n    const handleInputChange = (field, text) => {\r\n        setValue(field, text);\r\n        setIsFormDirty(true);\r\n    };\r\n    console.log(fields);\r\n    return (\r\n        <View style={styles.container}>\r\n            {fields.map((field) => (\r\n                <View key={field.name}>\r\n                    {field.type === 'text' && (\r\n                        <Controller\r\n                            control={control}\r\n                            render={({ field: { value } }) => (\r\n                                <TextInput\r\n                                    style={styles.input}\r\n                                    placeholder={field.placeholder}\r\n                                    value={value}\r\n                                    onChangeText={(text) => handleInputChange(field.name, text)}\r\n                                    secureTextEntry={field.secureTextEntry}\r\n                                />\r\n                            )}\r\n                            name={field.name}\r\n                            rules={field.rules}\r\n                            defaultValue=\"\"\r\n                        />\r\n                    )}\r\n                    {field.type === 'picker' && (\r\n                        <Controller\r\n                            control={control}\r\n                            render={({ field: { value } }) => (\r\n                                <Picker\r\n                                    selectedValue={value}\r\n                                    onValueChange={(itemValue) => setValue(field.name, itemValue)}\r\n                                >\r\n                                    {field.options.map((option) => (\r\n                                        <Picker.Item key={option.value} label={option.name} value={option.value} />\r\n                                    ))}\r\n                                </Picker>\r\n                            )}\r\n                            name={field.name}\r\n                            rules={field.rules}\r\n                            defaultValue=\"\"\r\n                        />\r\n                    )}\r\n                    {errors[field.name] && <Text style={styles.error}>{errors[field.name].message}</Text>}\r\n                </View>\r\n            ))}\r\n            <GenericButton onPress={handleSubmit(onSubmit)}\r\n                title={submitButton}\r\n                isDisabled={Object.keys(errors).length > 0 || !isFormDirty}></GenericButton>\r\n        </View>\r\n    );\r\n};\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 16,\r\n        justifyContent: 'center',\r\n    },\r\n    input: {\r\n        height: 60,\r\n        borderColor: '#ccc',\r\n        borderWidth: 1,\r\n        marginBottom: 12,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 8,\r\n        fontSize: 16,\r\n    },\r\n    button: {\r\n        backgroundColor: 'green',\r\n        borderRadius: 8,\r\n        paddingVertical: 10,\r\n        alignItems: 'center',\r\n        marginTop: 16,\r\n        marginBottom: 12,\r\n    },\r\n    buttonText: {\r\n        color: '#fff',\r\n        fontWeight: 'bold',\r\n        fontSize: 16,\r\n    },\r\n    error: {\r\n        color: 'red',\r\n        fontSize: 20,\r\n        marginBottom: 12,\r\n    },\r\n});\r\nexport default GenericForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}